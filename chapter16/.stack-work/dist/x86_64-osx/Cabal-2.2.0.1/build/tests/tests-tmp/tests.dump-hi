
==================== FINAL INTERFACE ====================
2018-09-08 13:14:03.678441 UTC

interface main:Main 8043
  interface hash: f90eccdae16b0456047f99770bca03c8
  ABI hash: 0ff6f9c43e71c8bb7200661ca31e2770
  export-list hash: 41aff4012d133b62bab26a8489f95db6
  orphan hash: 045f4fb45301f0d2e7ab881d849037a3
  flag hash: 00fcfc18460b4a3b2135289caa725528
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: FunctorExercises Laws
package dependencies: QuickCheck-2.11.3 array-0.5.2.0
                      base-4.11.1.0* containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1
                      template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck 8597fb70e0afba5fb9d4ded03a4b1b62
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Function 802bffa257dd193d3d7b357a9f22238b
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Test 4bcdfba8853ed701d2281003a6c74081
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  FunctorExercises 4dc6145b8eeffa1a9410e3edb2c5400c
  exports: 1b88dc0eac94a8d3bddb0a01f89d2b67
  Four 91bf673542db2665cbec8ac481ccfa18
  Four' 89e5e321b428933ca524b74e71d0ef9e
  Identity 08739756d9efc42594117a3a3f8b08ce
  Pair 3d10e062af9c12be518afb9aab5ba253
  Three 945c11664471dc49214cc05b5f754237
  Three' afc5584f8a3f6ad30f7b424b8d941b81
  Two 235e6ae97823a67805388e091092d678
import  -/  Laws 4c86ee1fa5b4672efa8d6a968383ca8b
  exports: ea474cc38d2b2f8cdc0d395d1f2a3796
  functorCompose 68ff26ec90cc31e5cb9c83c31fd16bd1
  functorIdentity 352faab14f2fb57bac88cf2cb07dd7e0
56e17460a6879de0bfc769fc0a89ea92
  $s$fArbitraryFour'1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> FunctorExercises.Four' [GHC.Types.Char] GHC.Types.Int
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: Test.QuickCheck.Random.QCGen) (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case FunctorExercises.$w$carbitrary1
                        @ [GHC.Types.Char]
                        @ GHC.Types.Int
                        Main.$s$fArbitraryFour'1_$s$fArbitrary[]
                        Test.QuickCheck.Arbitrary.$fArbitraryInt
                        ww1
                        ww2
                        ww3
                        ww4
                        w3 of ww7 { (#,,,#) ww8 ww9 ww10 ww11 ->
                 FunctorExercises.Four'
                   @ [GHC.Types.Char]
                   @ GHC.Types.Int
                   ww8
                   ww9
                   ww10
                   ww11 } }) -}
cb21a090d6ebc828bc32c6e95c54b64d
  $s$fArbitraryFour'1_$s$fArbitrary[] ::
    Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Char]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  (Test.QuickCheck.Arbitrary.$fArbitraryZipList2
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R))
                  (\ (eta :: [GHC.Types.Char]) ->
                   Test.QuickCheck.Arbitrary.shrinkList
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar_$cshrink
                     eta) -}
4168960fa78c4923745b43be9eee988b
  $s$fArbitraryFun_$cshrink ::
    Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int
    -> [Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int]
  {- Arity: 1, Strictness: <S(SL),1*U(1*U(U,U,1*U),U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w3 :: Test.QuickCheck.Function.Fun
                            GHC.Types.Int GHC.Types.Int) ->
                 case w3 of ww { Test.QuickCheck.Function.Fun ww1 ww2 ->
                 case ww1 of ww3 { (,,) ww4 ww5 ww6 ->
                 Test.QuickCheck.Function.$w$cshrink
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   Test.QuickCheck.Arbitrary.$fArbitraryInt
                   ww4
                   ww5
                   ww6
                   ww2 } }) -}
a231cde55f0a16740b156e8ced22b3d2
  $s$fArbitraryZipList1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Test.QuickCheck.Random.QCGen) (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w2 of ww7 { GHC.Types.I# ww8 ->
                 Test.QuickCheck.Gen.$wlistOf
                   @ GHC.Types.Int
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   ww1
                   ww2
                   ww3
                   ww4
                   ww8 } }) -}
d1dfc3a11cc0a94ef28a5fd3d5fc8346
  $s$fShowFour ::
    GHC.Show.Show
      (FunctorExercises.Four
         [GHC.Types.Char] GHC.Types.Int [GHC.Types.Char] GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (FunctorExercises.Four
                       [GHC.Types.Char] GHC.Types.Int [GHC.Types.Char] GHC.Types.Int)
                  (FunctorExercises.$fShowFour_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt)
                  (\ (x :: FunctorExercises.Four
                             [GHC.Types.Char] GHC.Types.Int [GHC.Types.Char] GHC.Types.Int) ->
                   FunctorExercises.$fShowFour_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt
                     FunctorExercises.$fShowFour1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [FunctorExercises.Four
                               [GHC.Types.Char] GHC.Types.Int [GHC.Types.Char] GHC.Types.Int])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (FunctorExercises.Four
                          [GHC.Types.Char] GHC.Types.Int [GHC.Types.Char] GHC.Types.Int)
                     (FunctorExercises.$fShowFour_$cshowsPrec
                        @ [GHC.Types.Char]
                        @ GHC.Types.Int
                        @ [GHC.Types.Char]
                        @ GHC.Types.Int
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShowInt
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShowInt
                        FunctorExercises.$fShowFour1)
                     ls
                     s) -}
86c5115289cf3231749f6230b2c5fc31
  $s$fShowFour' ::
    GHC.Show.Show
      (FunctorExercises.Four' [GHC.Types.Char] GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (FunctorExercises.Four' [GHC.Types.Char] GHC.Types.Int)
                  (FunctorExercises.$fShowFour'_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt)
                  (\ (x :: FunctorExercises.Four' [GHC.Types.Char] GHC.Types.Int) ->
                   FunctorExercises.$fShowFour'_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt
                     FunctorExercises.$fShowFour1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [FunctorExercises.Four' [GHC.Types.Char] GHC.Types.Int])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (FunctorExercises.Four' [GHC.Types.Char] GHC.Types.Int)
                     (FunctorExercises.$fShowFour'_$cshowsPrec
                        @ [GHC.Types.Char]
                        @ GHC.Types.Int
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShowInt
                        FunctorExercises.$fShowFour1)
                     ls
                     s) -}
b9f8246448610458257c3e3cef676a4c
  $s$fShowFun ::
    GHC.Show.Show
      (Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int)
                  (Test.QuickCheck.Function.$fShowFun_$cshowsPrec
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt
                     GHC.Show.$fShowInt)
                  (\ (ds :: Test.QuickCheck.Function.Fun
                              GHC.Types.Int GHC.Types.Int) ->
                   case ds of wild { Test.QuickCheck.Function.Fun ds1 ds2 ->
                   case ds1 of wild1 { (,,) ds3 ds4 ds5 ->
                   case ds5 of wild2 {
                     Test.QuickCheck.Function.Shrunk
                     -> Test.QuickCheck.Function.showFunction
                          @ GHC.Types.Int
                          @ GHC.Types.Int
                          GHC.Show.$fShowInt
                          GHC.Show.$fShowInt
                          ds3
                          (GHC.Base.Just @ GHC.Types.Int ds4)
                     Test.QuickCheck.Function.NotShrunk
                     -> Test.QuickCheck.Function.$fShowFun2 } } })
                  (\ (ls :: [Test.QuickCheck.Function.Fun
                               GHC.Types.Int GHC.Types.Int])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int)
                     (Test.QuickCheck.Function.$fShowFun_$cshowsPrec
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        GHC.Show.$fShowInt
                        Test.QuickCheck.Function.$fShowFun1)
                     ls
                     s) -}
31883cfb52f0d1e76b9be94ace6bffe9
  $s$fShowIdentity ::
    GHC.Show.Show (FunctorExercises.Identity GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (FunctorExercises.Identity GHC.Types.Int)
                  (FunctorExercises.$fShowIdentity_$cshowsPrec
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt)
                  (\ (x :: FunctorExercises.Identity GHC.Types.Int) ->
                   GHC.Base.augment
                     @ GHC.Types.Char
                     (\ @ b
                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                        (n :: b)[OneShot] ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b
                        c
                        n
                        FunctorExercises.$fShowIdentity1)
                     (GHC.Show.showSignedInt
                        FunctorExercises.$fShowFour3
                        x `cast` (FunctorExercises.N:Identity[0] <GHC.Types.Int>_R)
                        (GHC.Types.[] @ GHC.Types.Char)))
                  (\ (ls :: [FunctorExercises.Identity GHC.Types.Int])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (FunctorExercises.Identity GHC.Types.Int)
                     (FunctorExercises.$fShowIdentity_$cshowsPrec
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        FunctorExercises.$fShowFour1)
                     ls
                     s) -}
e95ac8d35b2ceba2ff9111f51af85dd1
  $s$fShowPair :: GHC.Show.Show (FunctorExercises.Pair GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (FunctorExercises.Pair GHC.Types.Int)
                  (FunctorExercises.$fShowPair_$cshowsPrec
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt)
                  (\ (x :: FunctorExercises.Pair GHC.Types.Int) ->
                   FunctorExercises.$fShowPair_$cshowsPrec
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt
                     FunctorExercises.$fShowFour1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [FunctorExercises.Pair GHC.Types.Int])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (FunctorExercises.Pair GHC.Types.Int)
                     (FunctorExercises.$fShowPair_$cshowsPrec
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        FunctorExercises.$fShowFour1)
                     ls
                     s) -}
d7c1df3cb9a35470a0fa70509cafebd6
  $s$fShowThree ::
    GHC.Show.Show
      (FunctorExercises.Three
         [GHC.Types.Char] [GHC.Types.Char] GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (FunctorExercises.Three
                       [GHC.Types.Char] [GHC.Types.Char] GHC.Types.Int)
                  (FunctorExercises.$fShowThree_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt)
                  (\ (x :: FunctorExercises.Three
                             [GHC.Types.Char] [GHC.Types.Char] GHC.Types.Int) ->
                   FunctorExercises.$fShowThree_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt
                     FunctorExercises.$fShowFour1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [FunctorExercises.Three
                               [GHC.Types.Char] [GHC.Types.Char] GHC.Types.Int])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (FunctorExercises.Three
                          [GHC.Types.Char] [GHC.Types.Char] GHC.Types.Int)
                     (FunctorExercises.$fShowThree_$cshowsPrec
                        @ [GHC.Types.Char]
                        @ [GHC.Types.Char]
                        @ GHC.Types.Int
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShowInt
                        FunctorExercises.$fShowFour1)
                     ls
                     s) -}
6b3749a3adb197079e4a76bf8e5e7f62
  $s$fShowThree' ::
    GHC.Show.Show
      (FunctorExercises.Three' [GHC.Types.Char] GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (FunctorExercises.Three' [GHC.Types.Char] GHC.Types.Int)
                  (FunctorExercises.$fShowThree'_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt)
                  (\ (x :: FunctorExercises.Three' [GHC.Types.Char] GHC.Types.Int) ->
                   FunctorExercises.$fShowThree'_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt
                     FunctorExercises.$fShowFour1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [FunctorExercises.Three' [GHC.Types.Char] GHC.Types.Int])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (FunctorExercises.Three' [GHC.Types.Char] GHC.Types.Int)
                     (FunctorExercises.$fShowThree'_$cshowsPrec
                        @ [GHC.Types.Char]
                        @ GHC.Types.Int
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShowInt
                        FunctorExercises.$fShowFour1)
                     ls
                     s) -}
31cab643bf60ca62faaa4f0b3587018d
  $s$fShowTwo ::
    GHC.Show.Show (FunctorExercises.Two [GHC.Types.Char] GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (FunctorExercises.Two [GHC.Types.Char] GHC.Types.Int)
                  (FunctorExercises.$fShowTwo_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt)
                  (\ (x :: FunctorExercises.Two [GHC.Types.Char] GHC.Types.Int) ->
                   FunctorExercises.$fShowTwo_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt
                     FunctorExercises.$fShowFour1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [FunctorExercises.Two [GHC.Types.Char] GHC.Types.Int])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (FunctorExercises.Two [GHC.Types.Char] GHC.Types.Int)
                     (FunctorExercises.$fShowTwo_$cshowsPrec
                        @ [GHC.Types.Char]
                        @ GHC.Types.Int
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShowInt
                        FunctorExercises.$fShowFour1)
                     ls
                     s) -}
c4234e652cb641d6532436bc58dc5c46
  $s$fTestable(->)3 ::
    (Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int
     -> Main.IntToInt -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int
                         -> Main.IntToInt -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable w ww1 ww2 ww3 ww4 w2 }) -}
1931ea113aa6abf905613c510924a510
  $s$fTestable(->)4 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$wlvl ww1 ww2 ww3 ww4 w1 of ww7 { (#,#) ww8 ww9 ->
                 Test.QuickCheck.Function.Fun
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   ww8
                   ww9 } }) -}
fb20d6dc6e39fa34d8bc0d6a269a899a
  $s$fTestable(->)5 ::
    (Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int
                         -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable1 w ww1 ww2 ww3 ww4 w2 }) -}
de987ac77afb4d93675fb3f00042183a
  $s$fTestable(->)6 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$wlvl1 ww1 ww2 ww3 ww4 w1 of ww7 { (#,#) ww8 ww9 ->
                 Test.QuickCheck.Function.Fun
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   ww8
                   ww9 } }) -}
d13ea77c78d235ccd6d748946afeb93b
  $squickCheck12 ::
    FunctorExercises.Pair GHC.Types.Int
    -> [FunctorExercises.Pair GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: FunctorExercises.Pair GHC.Types.Int) ->
                 GHC.Types.[] @ (FunctorExercises.Pair GHC.Types.Int)) -}
70ee5ce632fc718729778328a61b5690
  $squickCheck13 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> FunctorExercises.Pair GHC.Types.Int
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$wlvl3 ww1 ww2 ww3 ww4 w1 of ww7 { (#,#) ww8 ww9 ->
                 FunctorExercises.Pair @ GHC.Types.Int ww8 ww9 } }) -}
77f2c73d2c524e8aba83e95ab3005e69
  $squickCheck18 ::
    FunctorExercises.Two [GHC.Types.Char] GHC.Types.Int
    -> [FunctorExercises.Two [GHC.Types.Char] GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: FunctorExercises.Two [GHC.Types.Char] GHC.Types.Int) ->
                 GHC.Types.[]
                   @ (FunctorExercises.Two [GHC.Types.Char] GHC.Types.Int)) -}
8c530c75d2d1aef2851a0cd904ae6060
  $squickCheck19 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> FunctorExercises.Two [GHC.Types.Char] GHC.Types.Int
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$wlvl4 ww1 ww2 ww3 ww4 w1 of ww7 { (#,#) ww8 ww9 ->
                 FunctorExercises.Two
                   @ [GHC.Types.Char]
                   @ GHC.Types.Int
                   ww8
                   ww9 } }) -}
a54f29cd5a2ae7e2d01652270b8cc8f9
  $squickCheck24 ::
    FunctorExercises.Three
      [GHC.Types.Char] [GHC.Types.Char] GHC.Types.Int
    -> [FunctorExercises.Three
          [GHC.Types.Char] [GHC.Types.Char] GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: FunctorExercises.Three
                            [GHC.Types.Char] [GHC.Types.Char] GHC.Types.Int) ->
                 GHC.Types.[]
                   @ (FunctorExercises.Three
                        [GHC.Types.Char] [GHC.Types.Char] GHC.Types.Int)) -}
16e03e4fc29b109a8edaeaa257075165
  $squickCheck25 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> FunctorExercises.Three
         [GHC.Types.Char] [GHC.Types.Char] GHC.Types.Int
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$wlvl5 ww1 ww2 ww3 ww4 w1 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 FunctorExercises.Three
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   @ GHC.Types.Int
                   ww8
                   ww9
                   ww10 } }) -}
df2daf63ce8835a51b42b4dd91467f60
  $squickCheck3 :: [GHC.Types.Int] -> [[GHC.Types.Int]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [GHC.Types.Int]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Types.Int
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sshrinkIntegral
                   eta) -}
aed4245cddade1643c3317ac97cdddd5
  $squickCheck30 ::
    FunctorExercises.Three' [GHC.Types.Char] GHC.Types.Int
    -> [FunctorExercises.Three' [GHC.Types.Char] GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: FunctorExercises.Three'
                            [GHC.Types.Char] GHC.Types.Int) ->
                 GHC.Types.[]
                   @ (FunctorExercises.Three' [GHC.Types.Char] GHC.Types.Int)) -}
360e51822fe383c055467faec7089663
  $squickCheck31 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> FunctorExercises.Three' [GHC.Types.Char] GHC.Types.Int
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$wlvl6 ww1 ww2 ww3 ww4 w1 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 FunctorExercises.Three'
                   @ [GHC.Types.Char]
                   @ GHC.Types.Int
                   ww8
                   ww9
                   ww10 } }) -}
4718adf519ca40bae0c467592a56066e
  $squickCheck36 ::
    FunctorExercises.Four
      [GHC.Types.Char] GHC.Types.Int [GHC.Types.Char] GHC.Types.Int
    -> [FunctorExercises.Four
          [GHC.Types.Char] GHC.Types.Int [GHC.Types.Char] GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: FunctorExercises.Four
                            [GHC.Types.Char] GHC.Types.Int [GHC.Types.Char] GHC.Types.Int) ->
                 GHC.Types.[]
                   @ (FunctorExercises.Four
                        [GHC.Types.Char] GHC.Types.Int [GHC.Types.Char] GHC.Types.Int)) -}
00b92516d9cb40b543a5a647925cec35
  $squickCheck37 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> FunctorExercises.Four
         [GHC.Types.Char] GHC.Types.Int [GHC.Types.Char] GHC.Types.Int
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case FunctorExercises.$w$carbitrary
                        @ [GHC.Types.Char]
                        @ GHC.Types.Int
                        @ [GHC.Types.Char]
                        @ GHC.Types.Int
                        Main.$s$fArbitraryFour'1_$s$fArbitrary[]
                        Test.QuickCheck.Arbitrary.$fArbitraryInt
                        Main.$s$fArbitraryFour'1_$s$fArbitrary[]
                        Test.QuickCheck.Arbitrary.$fArbitraryInt
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,,,#) ww8 ww9 ww10 ww11 ->
                 FunctorExercises.Four
                   @ [GHC.Types.Char]
                   @ GHC.Types.Int
                   @ [GHC.Types.Char]
                   @ GHC.Types.Int
                   ww8
                   ww9
                   ww10
                   ww11 } }) -}
0f1a8c47749e7210638c2cd0ef8a132e
  $squickCheck42 ::
    FunctorExercises.Four' [GHC.Types.Char] GHC.Types.Int
    -> [FunctorExercises.Four' [GHC.Types.Char] GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: FunctorExercises.Four' [GHC.Types.Char] GHC.Types.Int) ->
                 GHC.Types.[]
                   @ (FunctorExercises.Four' [GHC.Types.Char] GHC.Types.Int)) -}
b25da56ec72e6c0b9f96a61495974688
  $squickCheck46 ::
    ([GHC.Types.Int] -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Types.Int] -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable2 w ww1 ww2 ww3 ww4 w2 }) -}
a194fc8a49e948fb41e90e4b995787a2
  $squickCheck6 ::
    FunctorExercises.Identity GHC.Types.Int
    -> [FunctorExercises.Identity GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: FunctorExercises.Identity GHC.Types.Int) ->
                 GHC.Types.[] @ (FunctorExercises.Identity GHC.Types.Int)) -}
6ccf33e53f779f6573bd0c65846822a6
  $squickCheck7 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> FunctorExercises.Identity GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 case Main.$wlvl2 ww1 ww2 ww3 ww4 ww8 of ww9 { DEFAULT ->
                 (GHC.Types.I# ww9)
                   `cast`
                 (Sym (FunctorExercises.N:Identity[0] <GHC.Types.Int>_R)) } } }) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
455349f9936744cb6d585faf4f63189e
  $w$dTestable ::
    (Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int
     -> Main.IntToInt -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Test.QuickCheck.Function.Fun
                           GHC.Types.Int GHC.Types.Int
                         -> Main.IntToInt -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int)
                   @ (Main.IntToInt -> GHC.Types.Bool)
                   Main.$s$fShowFun
                   Main.$s$fTestable(->)5
                     `cast`
                   ((<Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int
                      -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Test.QuickCheck.Function.Fun
                                                                                                                                       GHC.Types.Int
                                                                                                                                       GHC.Types.Int
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$s$fTestable(->)4
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int>_R))
                   Main.$s$fArbitraryFun_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
e6a97db18d6ec05a34dba48776eb5df6
  $w$dTestable1 ::
    (Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int
     -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Test.QuickCheck.Function.Fun
                           GHC.Types.Int GHC.Types.Int
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int)
                   @ GHC.Types.Bool
                   Main.$s$fShowFun
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$s$fTestable(->)6
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int>_R))
                   Main.$s$fArbitraryFun_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
2b81487ae31632d2f1942aa1982b00a5
  $w$dTestable2 ::
    ([GHC.Types.Int] -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Int] -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ [GHC.Types.Int]
                   @ GHC.Types.Bool
                   GHC.Show.$fShow[]_$s$fShow[]
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$s$fArbitraryZipList1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Int]>_R))
                   Main.$squickCheck3
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
273560a7fef1d677522e7f8580e568f6
  $wlvl ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# (GHC.Types.Int Test.QuickCheck.Function.:-> GHC.Types.Int,
           GHC.Types.Int, Test.QuickCheck.Function.Shrunk),
          GHC.Types.Int -> GHC.Types.Int #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 let {
                   eta :: GHC.Types.Int -> GHC.Types.Int
                   = case ww8 of ww19 { System.Random.TF.Gen.TFGen ww20 ww21 ww22 ww23 ww24 ww25 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww20
                            ww21
                            ww22
                            ww23 of ww26 { (#,#) ww27 ww28 ->
                     \ (r1 :: GHC.Types.Int) ->
                     Test.QuickCheck.Arbitrary.$fCoArbitraryChar2
                       @ GHC.Types.Int
                       r1
                       Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                         `cast`
                       (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                       ww27 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       w } }
                 } in
                 let {
                   p :: [GHC.Word.Word8] Test.QuickCheck.Function.:-> GHC.Types.Int
                   = Test.QuickCheck.Function.$fFunctionA_$s$cfunction
                       @ GHC.Types.Int
                       (\ (x :: [GHC.Word.Word8]) ->
                        eta
                          (case GHC.Integer.Type.integerToInt
                                  (GHC.Integer.Type.negateInteger
                                     (GHC.Integer.Type.plusInteger
                                        (Test.QuickCheck.Function.$fFunctionA_hNatural x)
                                        Test.QuickCheck.Function.$fFunctionA1)) of wild { DEFAULT ->
                           GHC.Types.I# wild }))
                 } in
                 let {
                   p1 :: [GHC.Word.Word8] Test.QuickCheck.Function.:-> GHC.Types.Int
                   = Test.QuickCheck.Function.$fFunctionA_$s$cfunction
                       @ GHC.Types.Int
                       (\ (x :: [GHC.Word.Word8]) ->
                        eta
                          (case GHC.Integer.Type.integerToInt
                                  (Test.QuickCheck.Function.$fFunctionA_hNatural
                                     x) of wild { DEFAULT ->
                           GHC.Types.I# wild }))
                 } in
                 let {
                   p2 :: Data.Either.Either [GHC.Word.Word8] [GHC.Word.Word8]
                         Test.QuickCheck.Function.:-> GHC.Types.Int
                   = Test.QuickCheck.Function.:+:
                       @ (Data.Either.Either [GHC.Word.Word8] [GHC.Word.Word8])
                       @ GHC.Types.Int
                       @ [GHC.Word.Word8]
                       @ [GHC.Word.Word8]
                       @~ <Data.Either.Either [GHC.Word.Word8] [GHC.Word.Word8]>_N
                       p
                       p1
                 } in
                 let {
                   p3 :: GHC.Integer.Type.Integer
                         Test.QuickCheck.Function.:-> GHC.Types.Int
                   = Test.QuickCheck.Function.Map
                       @ GHC.Integer.Type.Integer
                       @ GHC.Types.Int
                       @ (Data.Either.Either [GHC.Word.Word8] [GHC.Word.Word8])
                       Test.QuickCheck.Function.$fFunctionA_g
                       Test.QuickCheck.Function.$fFunctionA_h
                       p2
                 } in
                 let {
                   p4 :: GHC.Types.Int Test.QuickCheck.Function.:-> GHC.Types.Int
                   = Test.QuickCheck.Function.Map
                       @ GHC.Types.Int
                       @ GHC.Types.Int
                       @ GHC.Integer.Type.Integer
                       GHC.Real.$fIntegralInt_$ctoInteger
                       GHC.Num.$fNumInt_$cfromInteger
                       p3
                 } in
                 let {
                   d :: GHC.Types.Int
                   = case ww15 of ww19 { System.Random.TF.Gen.TFGen ww20 ww21 ww22 ww23 ww24 ww25 ->
                     case w of ww26 { GHC.Types.I# ww27 ->
                     case Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                            ww20
                            ww21
                            ww22
                            ww23
                            ww27 of ww28 { DEFAULT ->
                     GHC.Types.I# ww28 } } }
                 } in
                 (# (p4, d, Test.QuickCheck.Function.NotShrunk),
                    Test.QuickCheck.Function.abstract
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      p4
                      d #) } } }) -}
cdd33ab8b79fe51b57319322e297a2ac
  $wlvl1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# (GHC.Types.Int Test.QuickCheck.Function.:-> GHC.Types.Int,
           GHC.Types.Int, Test.QuickCheck.Function.Shrunk),
          GHC.Types.Int -> GHC.Types.Int #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 let {
                   eta :: GHC.Types.Int -> GHC.Types.Int
                   = case ww8 of ww19 { System.Random.TF.Gen.TFGen ww20 ww21 ww22 ww23 ww24 ww25 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww20
                            ww21
                            ww22
                            ww23 of ww26 { (#,#) ww27 ww28 ->
                     \ (r1 :: GHC.Types.Int) ->
                     Test.QuickCheck.Arbitrary.$fCoArbitraryChar2
                       @ GHC.Types.Int
                       r1
                       Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                         `cast`
                       (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                       ww27 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       w } }
                 } in
                 let {
                   p :: [GHC.Word.Word8] Test.QuickCheck.Function.:-> GHC.Types.Int
                   = Test.QuickCheck.Function.$fFunctionA_$s$cfunction
                       @ GHC.Types.Int
                       (\ (x :: [GHC.Word.Word8]) ->
                        eta
                          (case GHC.Integer.Type.integerToInt
                                  (GHC.Integer.Type.negateInteger
                                     (GHC.Integer.Type.plusInteger
                                        (Test.QuickCheck.Function.$fFunctionA_hNatural x)
                                        Test.QuickCheck.Function.$fFunctionA1)) of wild { DEFAULT ->
                           GHC.Types.I# wild }))
                 } in
                 let {
                   p1 :: [GHC.Word.Word8] Test.QuickCheck.Function.:-> GHC.Types.Int
                   = Test.QuickCheck.Function.$fFunctionA_$s$cfunction
                       @ GHC.Types.Int
                       (\ (x :: [GHC.Word.Word8]) ->
                        eta
                          (case GHC.Integer.Type.integerToInt
                                  (Test.QuickCheck.Function.$fFunctionA_hNatural
                                     x) of wild { DEFAULT ->
                           GHC.Types.I# wild }))
                 } in
                 let {
                   p2 :: Data.Either.Either [GHC.Word.Word8] [GHC.Word.Word8]
                         Test.QuickCheck.Function.:-> GHC.Types.Int
                   = Test.QuickCheck.Function.:+:
                       @ (Data.Either.Either [GHC.Word.Word8] [GHC.Word.Word8])
                       @ GHC.Types.Int
                       @ [GHC.Word.Word8]
                       @ [GHC.Word.Word8]
                       @~ <Data.Either.Either [GHC.Word.Word8] [GHC.Word.Word8]>_N
                       p
                       p1
                 } in
                 let {
                   p3 :: GHC.Integer.Type.Integer
                         Test.QuickCheck.Function.:-> GHC.Types.Int
                   = Test.QuickCheck.Function.Map
                       @ GHC.Integer.Type.Integer
                       @ GHC.Types.Int
                       @ (Data.Either.Either [GHC.Word.Word8] [GHC.Word.Word8])
                       Test.QuickCheck.Function.$fFunctionA_g
                       Test.QuickCheck.Function.$fFunctionA_h
                       p2
                 } in
                 let {
                   p4 :: GHC.Types.Int Test.QuickCheck.Function.:-> GHC.Types.Int
                   = Test.QuickCheck.Function.Map
                       @ GHC.Types.Int
                       @ GHC.Types.Int
                       @ GHC.Integer.Type.Integer
                       GHC.Real.$fIntegralInt_$ctoInteger
                       GHC.Num.$fNumInt_$cfromInteger
                       p3
                 } in
                 let {
                   d :: GHC.Types.Int
                   = case ww15 of ww19 { System.Random.TF.Gen.TFGen ww20 ww21 ww22 ww23 ww24 ww25 ->
                     case w of ww26 { GHC.Types.I# ww27 ->
                     case Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                            ww20
                            ww21
                            ww22
                            ww23
                            ww27 of ww28 { DEFAULT ->
                     GHC.Types.I# ww28 } } }
                 } in
                 (# (p4, d, Test.QuickCheck.Function.NotShrunk),
                    Test.QuickCheck.Function.abstract
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      p4
                      d #) } } }) -}
68632311b8e7f2326b7002ffcfb311b4
  $wlvl2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww8 of ww5 { System.Random.TF.Gen.TFGen ww6 ww10 ww11 ww12 ww13 ww14 ->
                 Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                   ww6
                   ww10
                   ww11
                   ww12
                   ww4 } }) -}
ac0fe02e61a9ab54eaf2f48e2cb44060
  $wlvl3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w,
                    Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w #) } } }) -}
fa20264501b6e2be2afcf8735f608b42
  $wlvl4 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# [GHC.Types.Char], GHC.Types.Int #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# case ww8 of ww19 { System.Random.TF.Gen.TFGen ww20 ww21 ww22 ww23 ww24 ww25 ->
                    case w of ww26 { GHC.Types.I# ww27 ->
                    Test.QuickCheck.Gen.$wlistOf
                      @ GHC.Types.Char
                      Test.QuickCheck.Arbitrary.$fArbitraryChar_$carbitrary
                      ww20
                      ww21
                      ww22
                      ww23
                      ww27 } },
                    Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w #) } } }) -}
c98c7775fd91b1c377fc87fae7bb16bb
  $wlvl5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# [GHC.Types.Char], [GHC.Types.Char], GHC.Types.Int #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 case ww16 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww18
                        ww19
                        ww20
                        ww21 of ww24 { (#,#) ww25 ww26 ->
                 (# case ww8 of ww32 { System.Random.TF.Gen.TFGen ww33 ww34 ww35 ww36 ww37 ww38 ->
                    case w of ww39 { GHC.Types.I# ww40 ->
                    Test.QuickCheck.Gen.$wlistOf
                      @ GHC.Types.Char
                      Test.QuickCheck.Arbitrary.$fArbitraryChar_$carbitrary
                      ww33
                      ww34
                      ww35
                      ww36
                      ww40 } },
                    case ww15 of ww32 { System.Random.TF.Gen.TFGen ww33 ww34 ww35 ww36 ww37 ww38 ->
                    case w of ww39 { GHC.Types.I# ww40 ->
                    Test.QuickCheck.Gen.$wlistOf
                      @ GHC.Types.Char
                      Test.QuickCheck.Arbitrary.$fArbitraryChar_$carbitrary
                      ww33
                      ww34
                      ww35
                      ww36
                      ww40 } },
                    Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      ww25 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w #) } } } } }) -}
463b40fe980e9b6b7871ae19825f1117
  $wlvl6 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# [GHC.Types.Char], GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 case ww16 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww18
                        ww19
                        ww20
                        ww21 of ww24 { (#,#) ww25 ww26 ->
                 (# case ww8 of ww32 { System.Random.TF.Gen.TFGen ww33 ww34 ww35 ww36 ww37 ww38 ->
                    case w of ww39 { GHC.Types.I# ww40 ->
                    Test.QuickCheck.Gen.$wlistOf
                      @ GHC.Types.Char
                      Test.QuickCheck.Arbitrary.$fArbitraryChar_$carbitrary
                      ww33
                      ww34
                      ww35
                      ww36
                      ww40 } },
                    Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w,
                    Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      ww25 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w #) } } } } }) -}
115878d5555e50963450fa270c17d36d
  type FCInt a =
    a -> Main.IntToInt -> Main.IntToInt -> GHC.Types.Bool
b03b8a4a1b31c9d495b3f970223e5f59
  type IntToInt =
    Test.QuickCheck.Function.Fun GHC.Types.Int GHC.Types.Int
b4f9ae97a091b232a88173a93240314d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
2ae627898cff160a4ab35ad5461925fa
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
"SPEC/Main $fArbitraryFour'1 @ [Char] @ Int" [orphan] [0] forall (w1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                          GHC.Types.Int)
                                                                 (w :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                         [GHC.Types.Char])
  FunctorExercises.$fArbitraryFour'1 @ [GHC.Types.Char]
                                     @ GHC.Types.Int
                                     w
                                     w1
  = Main.$s$fArbitraryFour'1
"SPEC/Main $fArbitraryFun_$cshrink @ Int @ Int" [orphan] [0] forall (w2 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                             GHC.Types.Int)
                                                                    (w1 :: Test.QuickCheck.Arbitrary.CoArbitrary
                                                                             GHC.Types.Int)
                                                                    (w :: Test.QuickCheck.Function.Function
                                                                            GHC.Types.Int)
  Test.QuickCheck.Function.$fArbitraryFun_$cshrink @ GHC.Types.Int
                                                   @ GHC.Types.Int
                                                   w
                                                   w1
                                                   w2
  = Main.$s$fArbitraryFun_$cshrink
"SPEC/Main $fArbitraryZipList2 @ Int" [orphan] [0] forall (w :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                  GHC.Types.Int)
  Test.QuickCheck.Arbitrary.$fArbitraryZipList2 @ GHC.Types.Int w
  = Main.$s$fArbitraryZipList1
"SPEC/Main $fArbitrary[] @ Char" [orphan] forall (v :: Test.QuickCheck.Arbitrary.Arbitrary
                                                         GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitrary[] @ GHC.Types.Char v
  = Main.$s$fArbitraryFour'1_$s$fArbitrary[]
"SPEC/Main $fShowFour @ [Char] @ Int @ [Char] @ Int" [orphan] forall (v3 :: GHC.Show.Show
                                                                              GHC.Types.Int)
                                                                     (v2 :: GHC.Show.Show
                                                                              [GHC.Types.Char])
                                                                     (v1 :: GHC.Show.Show
                                                                              GHC.Types.Int)
                                                                     (v :: GHC.Show.Show
                                                                             [GHC.Types.Char])
  FunctorExercises.$fShowFour @ [GHC.Types.Char]
                              @ GHC.Types.Int
                              @ [GHC.Types.Char]
                              @ GHC.Types.Int
                              v
                              v1
                              v2
                              v3
  = Main.$s$fShowFour
"SPEC/Main $fShowFour' @ [Char] @ Int" [orphan] forall (v1 :: GHC.Show.Show
                                                                GHC.Types.Int)
                                                       (v :: GHC.Show.Show [GHC.Types.Char])
  FunctorExercises.$fShowFour' @ [GHC.Types.Char]
                               @ GHC.Types.Int
                               v
                               v1
  = Main.$s$fShowFour'
"SPEC/Main $fShowFun @ Int @ Int" [orphan] forall (v1 :: GHC.Show.Show
                                                           GHC.Types.Int)
                                                  (v :: GHC.Show.Show GHC.Types.Int)
  Test.QuickCheck.Function.$fShowFun @ GHC.Types.Int
                                     @ GHC.Types.Int
                                     v
                                     v1
  = Main.$s$fShowFun
"SPEC/Main $fShowIdentity @ Int" [orphan] forall (v :: GHC.Show.Show
                                                         GHC.Types.Int)
  FunctorExercises.$fShowIdentity @ GHC.Types.Int v
  = Main.$s$fShowIdentity
"SPEC/Main $fShowPair @ Int" [orphan] forall (v :: GHC.Show.Show
                                                     GHC.Types.Int)
  FunctorExercises.$fShowPair @ GHC.Types.Int v = Main.$s$fShowPair
"SPEC/Main $fShowThree @ [Char] @ [Char] @ Int" [orphan] forall (v2 :: GHC.Show.Show
                                                                         GHC.Types.Int)
                                                                (v1 :: GHC.Show.Show
                                                                         [GHC.Types.Char])
                                                                (v :: GHC.Show.Show
                                                                        [GHC.Types.Char])
  FunctorExercises.$fShowThree @ [GHC.Types.Char]
                               @ [GHC.Types.Char]
                               @ GHC.Types.Int
                               v
                               v1
                               v2
  = Main.$s$fShowThree
"SPEC/Main $fShowThree' @ [Char] @ Int" [orphan] forall (v1 :: GHC.Show.Show
                                                                 GHC.Types.Int)
                                                        (v :: GHC.Show.Show [GHC.Types.Char])
  FunctorExercises.$fShowThree' @ [GHC.Types.Char]
                                @ GHC.Types.Int
                                v
                                v1
  = Main.$s$fShowThree'
"SPEC/Main $fShowTwo @ [Char] @ Int" [orphan] forall (v1 :: GHC.Show.Show
                                                              GHC.Types.Int)
                                                     (v :: GHC.Show.Show [GHC.Types.Char])
  FunctorExercises.$fShowTwo @ [GHC.Types.Char] @ GHC.Types.Int v v1
  = Main.$s$fShowTwo
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

