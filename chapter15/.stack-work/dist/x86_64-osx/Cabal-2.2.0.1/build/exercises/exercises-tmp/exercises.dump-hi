
==================== FINAL INTERFACE ====================
2018-09-02 18:59:33.11022 UTC

interface main:Main 8043
  interface hash: 39aa226377aaed198281b70a15372334
  ABI hash: a4e28a44fc5de715ea3ebb2a7cb11c87
  export-list hash: 1ecae6be2ced624a738cee991e51dfac
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1d513c99c87e91d88a611f1c4d76ff0e
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: QuickCheck-2.11.3 array-0.5.2.0
                      base-4.11.1.0* containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1
                      template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck 8597fb70e0afba5fb9d4ded03a4b1b62
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Arbitrary 4df33de46388caa5cd1ba81ee16f6b92
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Test 4bcdfba8853ed701d2281003a6c74081
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
f06175e830ffad489e521dd0c82a471e
  $fArbitraryIdentity ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Main.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Main.Identity a)
                  (Main.$fArbitraryIdentity1 @ a v)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Identity a>_R))
                  (\ (ds :: Main.Identity a) -> GHC.Types.[] @ (Main.Identity a)) -}
f06175e830ffad489e521dd0c82a471e
  $fArbitraryIdentity1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$carbitrary @ a w ww1 ww2 ww3 ww4 w2 }) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fArbitraryTrivial ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Trivial
                  Main.$fArbitraryTrivial1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Trivial>_R))
                  Main.$fArbitraryTrivial_$cshrink -}
765ecc558e2054bfa87e2240bd2c06b6
  $fArbitraryTrivial1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                 Main.Trivial) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fArbitraryTrivial_$cshrink :: Main.Trivial -> [Main.Trivial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.Trivial) -> GHC.Types.[] @ Main.Trivial) -}
63d3a68deed304bc66e9720fd99d5013
  $fArbitraryTwo ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Main.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      (v1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Main.Two a b)
                  (Main.$fArbitraryTwo1 @ a @ b v v1)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Two a b>_R))
                  (\ (ds :: Main.Two a b) -> GHC.Types.[] @ (Main.Two a b)) -}
63d3a68deed304bc66e9720fd99d5013
  $fArbitraryTwo1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Two a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$w$carbitrary1
                        @ a
                        @ b
                        w
                        w1
                        ww1
                        ww2
                        ww3
                        ww4
                        w3 of ww7 { (#,#) ww8 ww9 ->
                 Main.Two @ a @ b ww8 ww9 } }) -}
86ce4ce8fef2d8517918a44a2d494f2a
  $fArbitraryTwo_$s$carbitrary ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Main.Two Main.Trivial [GHC.Types.Char]
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$w$s$carbitrary
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,#) ww8 ww9 ->
                 Main.Two @ Main.Trivial @ [GHC.Types.Char] ww8 ww9 } }) -}
f06175e830ffad489e521dd0c82a471e
  $fEqIdentity ::
    GHC.Classes.Eq a => GHC.Classes.Eq (Main.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Main.Identity a)
                  (GHC.Classes.== @ a v)
                    `cast`
                  (Sym (Main.N:Identity[0] <a>_R)
                   ->_R Sym (Main.N:Identity[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (GHC.Classes./= @ a v)
                    `cast`
                  (Sym (Main.N:Identity[0] <a>_R)
                   ->_R Sym (Main.N:Identity[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fEqTrivial :: GHC.Classes.Eq Main.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Trivial Main.$fEqTrivial_$c== Main.$fEqTrivial_$c/= -}
765ecc558e2054bfa87e2240bd2c06b6
  $fEqTrivial_$c/= :: Main.Trivial -> Main.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Main.Trivial) (y :: Main.Trivial) ->
                 case x of wild { Main.Trivial ->
                 case y of wild1 { Main.Trivial -> GHC.Types.False } }) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fEqTrivial_$c== :: Main.Trivial -> Main.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Trivial) (ds1 :: Main.Trivial) ->
                 case ds of wild { Main.Trivial ->
                 case ds1 of wild1 { Main.Trivial -> GHC.Types.True } }) -}
63d3a68deed304bc66e9720fd99d5013
  $fEqTwo ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    GHC.Classes.Eq (Main.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Classes.Eq a)
                      (v1 :: GHC.Classes.Eq b).
                  @ (Main.Two a b)
                  (Main.$fEqTwo_$c== @ a @ b v v1)
                  (Main.$fEqTwo_$c/= @ a @ b v v1) -}
63d3a68deed304bc66e9720fd99d5013
  $fEqTwo_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Main.Two a b -> Main.Two a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (x :: Main.Two a b)
                   (y :: Main.Two a b) ->
                 case x of wild { Main.Two a1 a2 ->
                 case y of wild1 { Main.Two b1 b2 ->
                 case GHC.Classes.== @ a $dEq a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.== @ b $dEq1 a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
63d3a68deed304bc66e9720fd99d5013
  $fEqTwo_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Main.Two a b -> Main.Two a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Classes.Eq b)
                   (w2 :: Main.Two a b)
                   (w3 :: Main.Two a b) ->
                 case w2 of ww { Main.Two ww1 ww2 ->
                 case w3 of ww3 { Main.Two ww4 ww5 ->
                 Main.$w$c== @ a @ b w w1 ww1 ww2 ww4 ww5 } }) -}
f06175e830ffad489e521dd0c82a471e
  $fSemigroupIdentity ::
    GHC.Base.Semigroup a => GHC.Base.Semigroup (Main.Identity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Base.Semigroup a).
                  @ (Main.Identity a)
                  (\ (ds :: Main.Identity a) (ds1 :: Main.Identity a) ->
                   GHC.Base.<>
                     @ a
                     v
                     ds `cast` (Main.N:Identity[0] <a>_R)
                     ds1 `cast` (Main.N:Identity[0] <a>_R))
                    `cast`
                  (<Main.Identity a>_R
                   ->_R <Main.Identity a>_R
                   ->_R Sym (Main.N:Identity[0] <a>_R))
                  (Main.$fSemigroupIdentity_$csconcat @ a v)
                  (Main.$fSemigroupIdentity_$cstimes @ a v) -}
f06175e830ffad489e521dd0c82a471e
  $fSemigroupIdentity_$csconcat ::
    GHC.Base.Semigroup a =>
    GHC.Base.NonEmpty (Main.Identity a) -> Main.Identity a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LS),1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: GHC.Base.Semigroup a)
                   (w1 :: GHC.Base.NonEmpty (Main.Identity a)) ->
                 case w1 of ww { GHC.Base.:| ww1 ww2 ->
                 Main.$w$csconcat @ a w ww1 ww2 }) -}
f06175e830ffad489e521dd0c82a471e
  $fSemigroupIdentity_$cstimes ::
    GHC.Base.Semigroup a =>
    forall b.
    GHC.Real.Integral b =>
    b -> Main.Identity a -> Main.Identity a
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U> -}
765ecc558e2054bfa87e2240bd2c06b6
  $fSemigroupTrivial :: GHC.Base.Semigroup Main.Trivial
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Trivial
                  Main.$fSemigroupTrivial_$c<>
                  Main.$fSemigroupTrivial_$csconcat
                  Main.$fSemigroupTrivial_$cstimes -}
765ecc558e2054bfa87e2240bd2c06b6
  $fSemigroupTrivial_$c<> ::
    Main.Trivial -> Main.Trivial -> Main.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Main.Trivial) (ds1 :: Main.Trivial) -> Main.Trivial) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fSemigroupTrivial_$csconcat ::
    GHC.Base.NonEmpty Main.Trivial -> Main.Trivial
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(1*U(),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.NonEmpty Main.Trivial) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 case as of wild1 { [] -> a1 : c cs -> Main.Trivial } }) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fSemigroupTrivial_$cstimes ::
    GHC.Real.Integral b => b -> Main.Trivial -> Main.Trivial
  {- Arity: 1, Strictness: <L,U> -}
63d3a68deed304bc66e9720fd99d5013
  $fSemigroupTwo ::
    (GHC.Base.Semigroup a, GHC.Base.Semigroup b) =>
    GHC.Base.Semigroup (Main.Two a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Base.Semigroup a)
                      (v1 :: GHC.Base.Semigroup b).
                  @ (Main.Two a b)
                  (Main.$fSemigroupTwo_$c<> @ a @ b v v1)
                  (Main.$fSemigroupTwo_$csconcat @ a @ b v v1)
                  (Main.$fSemigroupTwo_$cstimes @ a @ b v v1) -}
63d3a68deed304bc66e9720fd99d5013
  $fSemigroupTwo_$c<> ::
    (GHC.Base.Semigroup a, GHC.Base.Semigroup b) =>
    Main.Two a b -> Main.Two a b -> Main.Two a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dSemigroup :: GHC.Base.Semigroup a)
                   ($dSemigroup1 :: GHC.Base.Semigroup b)
                   (ds :: Main.Two a b)
                   (ds1 :: Main.Two a b) ->
                 case ds of wild { Main.Two x1 y1 ->
                 case ds1 of wild1 { Main.Two x2 y2 ->
                 Main.Two
                   @ a
                   @ b
                   (GHC.Base.<> @ a $dSemigroup x1 x2)
                   (GHC.Base.<> @ b $dSemigroup1 y1 y2) } }) -}
63d3a68deed304bc66e9720fd99d5013
  $fSemigroupTwo_$csconcat ::
    (GHC.Base.Semigroup a, GHC.Base.Semigroup b) =>
    GHC.Base.NonEmpty (Main.Two a b) -> Main.Two a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U),1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Base.Semigroup a)
                   (w1 :: GHC.Base.Semigroup b)
                   (w2 :: GHC.Base.NonEmpty (Main.Two a b)) ->
                 case w2 of ww { GHC.Base.:| ww1 ww2 ->
                 case ww1 of ww3 { Main.Two ww4 ww5 ->
                 case Main.$w$csconcat1
                        @ a
                        @ b
                        w
                        w1
                        ww4
                        ww5
                        ww2 of ww6 { (#,#) ww7 ww8 ->
                 Main.Two @ a @ b ww7 ww8 } } }) -}
63d3a68deed304bc66e9720fd99d5013
  $fSemigroupTwo_$cstimes ::
    (GHC.Base.Semigroup a, GHC.Base.Semigroup b) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Main.Two a b -> Main.Two a b
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U> -}
f06175e830ffad489e521dd0c82a471e
  $fShowIdentity ::
    GHC.Show.Show a => GHC.Show.Show (Main.Identity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Main.Identity a)
                  (Main.$fShowIdentity_$cshowsPrec @ a v)
                  (Main.$fShowIdentity_$cshow @ a v)
                  (Main.$fShowIdentity_$cshowList @ a v) -}
d6684afb455d0d4922bbc56b1e4ac9b1
  $fShowIdentity1 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: (\ @ b
                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                   (n :: b)[OneShot] ->
                 letrec {
                   go :: [GHC.Types.Char] -> b {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Types.Char]) ->
                     case ds of wild { [] -> n : y ys -> c y (go ys) }
                 } in
                 go Main.$fShowIdentity2) -}
339ebe6ba767f04f901ad0e8210ca6c0
  $fShowIdentity2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowIdentity3) -}
3312419380fcdb5b20ba8af7de271c21
  $fShowIdentity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Identity "#) -}
a665c745b93c35ef5b6af813145525e3
  $fShowIdentity4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
2721a9db3d1fb5583376a1c623c0552a
  $fShowIdentity5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
d8cea63ea0e9e89185aae762c99c3b09
  $fShowIdentity6 :: Main.Identity [GHC.Types.Char] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Identity [GHC.Types.Char]) (x :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowIdentity2)
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.$fShow(,)3
                      (GHC.Show.showLitString
                         ds `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                         (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 x)))) -}
f06175e830ffad489e521dd0c82a471e
  $fShowIdentity_$cshow ::
    GHC.Show.Show a => Main.Identity a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Main.Identity a) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowIdentity2)
                   (GHC.Show.showsPrec
                      @ a
                      $dShow
                      Main.$fShowIdentity4
                      x `cast` (Main.N:Identity[0] <a>_R)
                      (GHC.Types.[] @ GHC.Types.Char))) -}
f06175e830ffad489e521dd0c82a471e
  $fShowIdentity_$cshowList ::
    GHC.Show.Show a => [Main.Identity a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Main.Identity a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Identity a)
                   (Main.$fShowIdentity_$cshowsPrec @ a $dShow Main.$fShowIdentity5)
                   ls
                   s) -}
f06175e830ffad489e521dd0c82a471e
  $fShowIdentity_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Main.Identity a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.Identity a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec @ a w ww1 w2 }) -}
f06175e830ffad489e521dd0c82a471e
  $fShowIdentity_$s$cshow ::
    Main.Identity [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Identity [GHC.Types.Char]) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowIdentity2)
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.$fShow(,)3
                      (GHC.Show.showLitString
                         x `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.$fShow(,)3
                            (GHC.Types.[] @ GHC.Types.Char))))) -}
e4cfe758f18a42e659527868da9b4d1b
  $fShowIdentity_$s$cshowList ::
    [Main.Identity [GHC.Types.Char]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Identity [GHC.Types.Char]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Identity [GHC.Types.Char])
                   Main.$fShowIdentity6
                   ls
                   s) -}
f06175e830ffad489e521dd0c82a471e
  $fShowIdentity_$s$cshowsPrec ::
    GHC.Types.Int -> Main.Identity [GHC.Types.Char] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Identity [GHC.Types.Char])
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$s$cshowsPrec ww1 w1 w2 }) -}
f06175e830ffad489e521dd0c82a471e
  $fShowIdentity_$s$fShowIdentity ::
    GHC.Show.Show (Main.Identity [GHC.Types.Char])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Main.Identity [GHC.Types.Char])
                  Main.$fShowIdentity_$s$cshowsPrec
                  Main.$fShowIdentity_$s$cshow
                  (\ (ls :: [Main.Identity [GHC.Types.Char]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Main.Identity [GHC.Types.Char])
                     (\ (ds :: Main.Identity [GHC.Types.Char]) ->
                      case GHC.Classes.geInt
                             Main.$fShowIdentity5
                             Main.$fShowIdentity4 of wild {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String)[OneShot] ->
                           GHC.Base.augment
                             @ GHC.Types.Char
                             Main.$fShowIdentity1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   ds `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 x)))
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String)[OneShot] ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.augment
                                @ GHC.Types.Char
                                Main.$fShowIdentity1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      ds `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) })
                     ls
                     s) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fShowTrivial :: GHC.Show.Show Main.Trivial
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Trivial
                  Main.$fShowTrivial_$cshowsPrec
                  Main.$fShowTrivial_$cshow
                  Main.$fShowTrivial_$cshowList -}
765ecc558e2054bfa87e2240bd2c06b6
  $fShowTrivial1 :: Main.Trivial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Trivial) (eta :: GHC.Base.String) ->
                 case ds of wild { Main.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowTrivial2)
                   eta }) -}
9c97662d6ae4fc87d5f4bf6b0810be8d
  $fShowTrivial2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowTrivial3) -}
d06997e94737b6117ac672e25d820a27
  $fShowTrivial3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Trivial"#) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fShowTrivial_$cshow :: Main.Trivial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Trivial) ->
                 case x of wild { Main.Trivial -> Main.$fShowTrivial2 }) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fShowTrivial_$cshowList :: [Main.Trivial] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Trivial]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Trivial Main.$fShowTrivial1 ls s) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fShowTrivial_$cshowsPrec ::
    GHC.Types.Int -> Main.Trivial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Main.Trivial)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild { Main.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowTrivial2)
                   eta }) -}
63d3a68deed304bc66e9720fd99d5013
  $fShowTwo ::
    (GHC.Show.Show a, GHC.Show.Show b) => GHC.Show.Show (Main.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Show.Show a)
                      (v1 :: GHC.Show.Show b).
                  @ (Main.Two a b)
                  (Main.$fShowTwo_$cshowsPrec @ a @ b v v1)
                  (Main.$fShowTwo_$cshow @ a @ b v v1)
                  (Main.$fShowTwo_$cshowList @ a @ b v v1) -}
375bf166513be4f84dd2c3feccc4443f
  $fShowTwo1 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                   (n :: b)[OneShot] ->
                 GHC.CString.unpackFoldrCString# @ b "Two "# c n) -}
0077176ef96d7419766bbbc558be5bcd
  $fShowTwo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Two "#) -}
0a6fe2c4b9217fdc73e8d04356fccde3
  $fShowTwo3 ::
    Main.Two Main.Trivial [GHC.Types.Char] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*H,1*U)><L,U>,
     Unfolding: (\ (w :: Main.Two Main.Trivial [GHC.Types.Char])
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Two ww1 ww2 ->
                 Main.$w$s$cshowsPrec1 0# ww1 ww2 w1 }) -}
fbddcbc14dc41e57010dc8e08a1af3ee
  $fShowTwo4 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
63d3a68deed304bc66e9720fd99d5013
  $fShowTwo_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    Main.Two a b -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (x :: Main.Two a b) ->
                 Main.$fShowTwo_$cshowsPrec
                   @ a
                   @ b
                   $dShow
                   $dShow1
                   Main.$fShowIdentity5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
63d3a68deed304bc66e9720fd99d5013
  $fShowTwo_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    [Main.Two a b] -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (ls :: [Main.Two a b])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Two a b)
                   (Main.$fShowTwo_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      Main.$fShowIdentity5)
                   ls
                   s) -}
63d3a68deed304bc66e9720fd99d5013
  $fShowTwo_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Types.Int -> Main.Two a b -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Main.Two a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { Main.Two ww3 ww4 ->
                 Main.$w$cshowsPrec1 @ a @ b w w1 ww1 ww3 ww4 } }) -}
90e00c35eb60dbcc189e8f047f8f4762
  $fShowTwo_$s$cshow ::
    Main.Two Main.Trivial [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*H,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Two Main.Trivial [GHC.Types.Char]) ->
                 case w of ww { Main.Two ww1 ww2 -> Main.$w$s$cshow ww1 ww2 }) -}
ce7a9438b8e3de9cd6de66d6e94a0b72
  $fShowTwo_$s$cshowList ::
    [Main.Two Main.Trivial [GHC.Types.Char]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Two Main.Trivial [GHC.Types.Char]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Two Main.Trivial [GHC.Types.Char])
                   Main.$fShowTwo3
                   ls
                   s) -}
63d3a68deed304bc66e9720fd99d5013
  $fShowTwo_$s$cshowsPrec ::
    GHC.Types.Int
    -> Main.Two Main.Trivial [GHC.Types.Char] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*H,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Two Main.Trivial [GHC.Types.Char])
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Two ww3 ww4 ->
                 Main.$w$s$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
63d3a68deed304bc66e9720fd99d5013
  $fShowTwo_$s$fShowTwo ::
    GHC.Show.Show (Main.Two Main.Trivial [GHC.Types.Char])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Main.Two Main.Trivial [GHC.Types.Char])
                  Main.$fShowTwo_$s$cshowsPrec
                  (\ (x :: Main.Two Main.Trivial [GHC.Types.Char]) ->
                   case x of wild { Main.Two b1 b2 ->
                   case GHC.Classes.geInt
                          Main.$fShowIdentity5
                          Main.$fShowIdentity4 of wild1 {
                     GHC.Types.False
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          Main.$fShowTwo1
                          (case b1 of wild2 { Main.Trivial ->
                           GHC.Base.augment
                             @ GHC.Types.Char
                             (\ @ b
                                (c :: GHC.Types.Char -> b -> b)[OneShot]
                                (n :: b)[OneShot] ->
                              GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowTrivial2)
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b2
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.[] @ GHC.Types.Char))))) })
                     GHC.Types.True
                     -> GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.$fShow(,)4
                          (GHC.Base.augment
                             @ GHC.Types.Char
                             Main.$fShowTwo1
                             (case b1 of wild2 { Main.Trivial ->
                              GHC.Base.augment
                                @ GHC.Types.Char
                                (\ @ b
                                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                                   (n :: b)[OneShot] ->
                                 GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowTrivial2)
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Show.showLitString
                                         b2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)3
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.$fShow(,)2
                                               (GHC.Types.[] @ GHC.Types.Char)))))) })) } })
                  (\ (ls :: [Main.Two Main.Trivial [GHC.Types.Char]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Main.Two Main.Trivial [GHC.Types.Char])
                     (Main.$fShowTwo_$s$cshowsPrec Main.$fShowIdentity5)
                     ls
                     s) -}
86487f6710f741c2136f7cb75377ba34
  $s$fTestable(->)11 ::
    (Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable2 w ww1 ww2 ww3 ww4 w2 }) -}
db5c353da5fe40d80d367d7403b4766a
  $s$fTestable(->)12 ::
    Main.Two Main.Trivial [GHC.Types.Char]
    -> [Main.Two Main.Trivial [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.Two Main.Trivial [GHC.Types.Char]) ->
                 GHC.Types.[] @ (Main.Two Main.Trivial [GHC.Types.Char])) -}
26814fe0c1b798418139e7426871c733
  $s$fTestable(->)14 ::
    (Main.Two Main.Trivial GHC.Base.String
     -> Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Two Main.Trivial GHC.Base.String
                         -> Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable3 w ww1 ww2 ww3 ww4 w2 }) -}
cbe7b223f6ab9945fe65d368f5f0dd28
  $s$fTestable(->)16 ::
    (Main.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Trivial -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable4 w ww1 ww2 ww3 ww4 w2 }) -}
9185f6621f77284ec980071e5033bb7a
  $s$fTestable(->)18 ::
    (Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable5 w ww1 ww2 ww3 ww4 w2 }) -}
9fbd06582eb206d211c482a808142282
  $s$fTestable(->)3 ::
    (Main.Identity GHC.Base.String
     -> Main.Identity GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Identity GHC.Base.String
                         -> Main.Identity GHC.Base.String -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable w ww1 ww2 ww3 ww4 w2 }) -}
2d856021a6da9b16a07da3f17bc0c8ab
  $s$fTestable(->)4 ::
    Main.Identity [GHC.Types.Char] -> [Main.Identity [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.Identity [GHC.Types.Char]) ->
                 GHC.Types.[] @ (Main.Identity [GHC.Types.Char])) -}
01a59a5a2860f336ac803b3f0ce1e3fe
  $s$fTestable(->)5 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Main.Identity [GHC.Types.Char]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$wlvl ww1 ww2 ww3 ww4 ww8 } }) -}
003d9f7e178675b42b0892fe4cb040a4
  $s$fTestable(->)6 ::
    (Main.Identity GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Identity GHC.Base.String -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable1 w ww1 ww2 ww3 ww4 w2 }) -}
0bd5949baa9edb5f640992311c2c884b
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14933744756080264347##
                   10325705257141500534##
                   Main.$trModule
                   Main.$tc'Identity2
                   1#
                   Main.$tc'Identity1) -}
06dc3a95b0f8e52b98fab182ef8e5788
  $tc'Identity1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c0dada2b15ae1f43367d2a7b838263f7
  $tc'Identity2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Identity3) -}
135186636ef9703f9f3dd552c37781d3
  $tc'Identity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Identity"#) -}
865596e2a382e2ffc4e2279f155fca86
  $tc'Trivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6457485729114745029##
                   3003837664020060680##
                   Main.$trModule
                   Main.$tc'Trivial2
                   0#
                   Main.$tc'Trivial1) -}
bf0003566bd066a9bceca4284b805808
  $tc'Trivial1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
ced5b10fb46dbe391811a136eba6ea94
  $tc'Trivial2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Trivial3) -}
6d59c0ee9fb6f34981689780a757bfe9
  $tc'Trivial3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Trivial"#) -}
af7e5c2c7aff56ddb76f82c12354dedd
  $tc'Two :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7581589987092827629##
                   15326290315829168296##
                   Main.$trModule
                   Main.$tc'Two2
                   2#
                   Main.$tc'Two1) -}
263c9ff8106bd8bcb42bd9cf5393dd06
  $tc'Two1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d993e58b5bc8d748892b5c5eba295026
  $tc'Two2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Two3) -}
7922cbd6d9971a2b40cd163a36de2a94
  $tc'Two3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Two"#) -}
28672504a208deaa7f40fff68130c41f
  $tcIdentity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13554781859897037554##
                   14585010631131321658##
                   Main.$trModule
                   Main.$tcIdentity1
                   0#
                   GHC.Types.krep$*Arr*) -}
4f408214dfe53a1936d344880a32cd2f
  $tcIdentity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcIdentity2) -}
e7a6f380740600ebf601298965149762
  $tcIdentity2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Identity"#) -}
ce72783dfe6d921c74b926152e31d187
  $tcTrivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1488722916004492003##
                   5561506386658536138##
                   Main.$trModule
                   Main.$tcTrivial1
                   0#
                   GHC.Types.krep$*) -}
87a4323a0ee6001afba3411933f97502
  $tcTrivial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$fShowTrivial3) -}
ca81e01de918985ec58e6b119a7d7465
  $tcTwo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2801403543926488040##
                   2925450971047963023##
                   Main.$trModule
                   Main.$tcTwo1
                   0#
                   GHC.Types.krep$*->*->*) -}
603f5e42414c66fbfbd589a0ee49455e
  $tcTwo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcTwo2) -}
da9b1d931c61c1a1efb3021b14514754
  $tcTwo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Two"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
d50546fc4edcba8daf67ed01826a03af
  $w$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    a -> b -> a -> b -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Classes.Eq b)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: a)
                   (ww3 :: b) ->
                 case GHC.Classes.== @ a w ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.== @ b w1 ww1 ww3 }) -}
f06175e830ffad489e521dd0c82a471e
  $w$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Main.Identity a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 ((Test.QuickCheck.Arbitrary.arbitrary @ a w)
                    `cast`
                  (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                    w1)
                   `cast`
                 (Sym (Main.N:Identity[0] <a>_R)) }) -}
8caa93d4c2b77eea7de2e1a0b6e71abe
  $w$carbitrary1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# a, b #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w2,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w2 #) } } }) -}
f06175e830ffad489e521dd0c82a471e
  $w$csconcat ::
    GHC.Base.Semigroup a =>
    Main.Identity a -> [Main.Identity a] -> Main.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Base.Semigroup a)
                   (ww :: Main.Identity a)
                   (ww1 :: [Main.Identity a]) ->
                 letrec {
                   go :: Main.Identity a -> [Main.Identity a] -> Main.Identity a
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ (b :: Main.Identity a) (ds1 :: [Main.Identity a]) ->
                     case ds1 of wild1 {
                       [] -> b
                       : c cs
                       -> (GHC.Base.<>
                             @ a
                             w
                             b `cast` (Main.N:Identity[0] <a>_R)
                             (go c cs) `cast` (Main.N:Identity[0] <a>_R))
                            `cast`
                          (Sym (Main.N:Identity[0] <a>_R)) }
                 } in
                 go ww ww1) -}
63d3a68deed304bc66e9720fd99d5013
  $w$csconcat1 ::
    (GHC.Base.Semigroup a, GHC.Base.Semigroup b) =>
    a -> b -> [Main.Two a b] -> (# a, b #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Base.Semigroup a)
                   (w1 :: GHC.Base.Semigroup b)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: [Main.Two a b]) ->
                 letrec {
                   $wgo :: a -> b -> [Main.Two a b] -> (# a, b #)
                     {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
                   = \ (ww3 :: a) (ww4 :: b) (w2 :: [Main.Two a b]) ->
                     case w2 of wild1 {
                       [] -> (# ww3, ww4 #)
                       : c cs
                       -> case c of ww5 { Main.Two ww6 ww7 ->
                          case $wgo ww6 ww7 cs of ww8 { (#,#) ww9 ww10 ->
                          (# GHC.Base.<> @ a w ww3 ww9, GHC.Base.<> @ b w1 ww4 ww10 #) } } }
                 } in
                 $wgo ww ww1 ww2) -}
f06175e830ffad489e521dd0c82a471e
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> Main.Identity a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Main.Identity a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       Main.$fShowIdentity4
                       w1 `cast` (Main.N:Identity[0] <a>_R)
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Main.$fShowIdentity2 (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowIdentity2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
af088ad9bcaed99fbcbaf7094b9fb237
  $w$cshowsPrec1 ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Prim.Int# -> a -> b -> GHC.Show.ShowS
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w Main.$fShowIdentity4 ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ b w1 Main.$fShowIdentity4 ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Main.$fShowTwo2
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowTwo2
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
971f5ec81237294938d7af7bb6aa84fc
  $w$dTestable ::
    (Main.Identity GHC.Base.String
     -> Main.Identity GHC.Base.String -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Identity GHC.Base.String
                         -> Main.Identity GHC.Base.String -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.Identity GHC.Base.String)
                   @ (Main.Identity GHC.Base.String -> GHC.Types.Bool)
                   Main.$fShowIdentity_$s$fShowIdentity
                   Main.$s$fTestable(->)6
                     `cast`
                   ((<Main.Identity GHC.Base.String -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Identity
                                                                                                                                       GHC.Base.String
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$s$fTestable(->)5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Identity [GHC.Types.Char]>_R))
                   Main.$s$fTestable(->)4
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
f7f6c0d03f12c529874c3f3f76d28d5d
  $w$dTestable1 ::
    (Main.Identity GHC.Base.String -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Identity GHC.Base.String
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.Identity GHC.Base.String)
                   @ GHC.Types.Bool
                   Main.$fShowIdentity_$s$fShowIdentity
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$s$fTestable(->)5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Identity [GHC.Types.Char]>_R))
                   Main.$s$fTestable(->)4
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
9f1c294a74bdc4ac089618cf3f3399bb
  $w$dTestable2 ::
    (Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Two Main.Trivial GHC.Base.String
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.Two Main.Trivial GHC.Base.String)
                   @ GHC.Types.Bool
                   Main.$fShowTwo_$s$fShowTwo
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryTwo_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Two Main.Trivial [GHC.Types.Char]>_R))
                   Main.$s$fTestable(->)12
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
d9769606805d963047dc44f649a76c77
  $w$dTestable3 ::
    (Main.Two Main.Trivial GHC.Base.String
     -> Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Two Main.Trivial GHC.Base.String
                         -> Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.Two Main.Trivial GHC.Base.String)
                   @ (Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
                   Main.$fShowTwo_$s$fShowTwo
                   Main.$s$fTestable(->)11
                     `cast`
                   ((<Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Two
                                                                                                                                       Main.Trivial
                                                                                                                                       GHC.Base.String
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$fArbitraryTwo_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Two Main.Trivial [GHC.Types.Char]>_R))
                   Main.$s$fTestable(->)12
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
37dcab31099d98cd039ff167a01a9c35
  $w$dTestable4 ::
    (Main.Trivial -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Trivial -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Main.Trivial
                   @ GHC.Types.Bool
                   Main.$fShowTrivial
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Trivial>_R))
                   Main.$fArbitraryTrivial_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
08a005ff6766596133babff3add6d59a
  $w$dTestable5 ::
    (Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Main.Trivial
                   @ (Main.Trivial -> GHC.Types.Bool)
                   Main.$fShowTrivial
                   Main.$s$fTestable(->)16
                     `cast`
                   ((<Main.Trivial -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Trivial
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Trivial>_R))
                   Main.$fArbitraryTrivial_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
ef651558ddd572eeb27370b4208f620a
  $w$s$carbitrary ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# Main.Trivial, [GHC.Types.Char] #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# Main.Trivial,
                    case ww15 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                    case w of ww24 { GHC.Types.I# ww25 ->
                    Test.QuickCheck.Gen.$wlistOf
                      @ GHC.Types.Char
                      Test.QuickCheck.Arbitrary.$fArbitraryChar_$carbitrary
                      ww18
                      ww19
                      ww20
                      ww21
                      ww25 } } #) } } }) -}
fe70c5ee368e3e503dd9b0aef3f211c5
  $w$s$cshow :: Main.Trivial -> [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*H><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Main.Trivial) (ww1 :: [GHC.Types.Char]) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowTwo2
                   (case ww of wild { Main.Trivial ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      Main.$fShowTrivial2
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.$fShow(,)3
                            (GHC.Show.showLitString ww1 Main.$fShowTwo4))) })) -}
f06175e830ffad489e521dd0c82a471e
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> Main.Identity [GHC.Types.Char]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Main.Identity [GHC.Types.Char])
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowIdentity2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              w `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 w1)))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowIdentity2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 w `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.$fShow(,)3
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1))))) }) -}
030287383b4870f3aa3cb2467e41e653
  $w$s$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Main.Trivial
    -> [GHC.Types.Char]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*H><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.Trivial)
                   (ww2 :: [GHC.Types.Char])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Main.$fShowTwo2
                       (case ww1 of wild { Main.Trivial ->
                        GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowTrivial2
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   ww2
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 x)))) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
63b4dc6aa2919c9304b61458d9bfa78f
  $wlvl ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Main.Identity [GHC.Types.Char]
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww8 of ww5 { System.Random.TF.Gen.TFGen ww6 ww10 ww11 ww12 ww13 ww14 ->
                 (Test.QuickCheck.Gen.$wlistOf
                    @ GHC.Types.Char
                    Test.QuickCheck.Arbitrary.$fArbitraryChar_$carbitrary
                    ww6
                    ww10
                    ww11
                    ww12
                    ww4)
                   `cast`
                 (Sym (Main.N:Identity[0] <[GHC.Types.Char]>_R)) } }) -}
f06175e830ffad489e521dd0c82a471e
  newtype Identity a = Identity a
902a1fc8892e9952e82c26a5e5962220
  type IdentityAssoc a =
    Main.Identity a
    -> Main.Identity a -> Main.Identity a -> GHC.Types.Bool
fc74068ca03dcd0c116cc4d45d7a2cf9
  type TrivAssoc =
    Main.Trivial -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool
765ecc558e2054bfa87e2240bd2c06b6
  data Trivial = Trivial
63d3a68deed304bc66e9720fd99d5013
  data Two a b = Two a b
a24666633e572b6488dbcaadd004db47
  type TwoAssoc a b =
    Main.Two a b -> Main.Two a b -> Main.Two a b -> GHC.Types.Bool
05774dbc923337edb9a4f9e163dc126c
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
5bb7bb4f72f9d1cf22e7d3e542e5eac8
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ Main.TrivAssoc
                        Main.main7
                          `cast`
                        ((<Main.Trivial
                           -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                         <Main.Trivial
                                                                                                                                          -> Main.Trivial
                                                                                                                                          -> Main.Trivial
                                                                                                                                          -> GHC.Types.Bool>_N))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main6
                        s of ds3 { (#,#) ipv ipv1 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (Main.IdentityAssoc GHC.Base.String)
                        Main.main5
                          `cast`
                        ((<Main.Identity GHC.Base.String
                           -> Main.Identity GHC.Base.String
                           -> Main.Identity GHC.Base.String
                           -> GHC.Types.Bool>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                         <Main.Identity
                                                                                                                                            GHC.Base.String
                                                                                                                                          -> Main.Identity
                                                                                                                                               GHC.Base.String
                                                                                                                                          -> Main.Identity
                                                                                                                                               GHC.Base.String
                                                                                                                                          -> GHC.Types.Bool>_N))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main4
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (Main.TwoAssoc Main.Trivial GHC.Base.String)
                        Main.main3
                          `cast`
                        ((<Main.Two Main.Trivial GHC.Base.String
                           -> Main.Two Main.Trivial GHC.Base.String
                           -> Main.Two Main.Trivial GHC.Base.String
                           -> GHC.Types.Bool>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                         <Main.Two
                                                                                                                                            Main.Trivial
                                                                                                                                            GHC.Base.String
                                                                                                                                          -> Main.Two
                                                                                                                                               Main.Trivial
                                                                                                                                               GHC.Base.String
                                                                                                                                          -> Main.Two
                                                                                                                                               Main.Trivial
                                                                                                                                               GHC.Base.String
                                                                                                                                          -> GHC.Types.Bool>_N))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main2
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 (# ipv4, GHC.Tuple.() #) } } }) -}
8d4c7803a9f53a94091f2087db82a526
  main2 ::
    Main.Two Main.Trivial GHC.Base.String
    -> Main.Two Main.Trivial GHC.Base.String
    -> Main.Two Main.Trivial GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,U)><S,1*U(A,U)><S,1*U(A,U)>,
     Unfolding: (\ (a :: Main.Two Main.Trivial GHC.Base.String)
                   (b :: Main.Two Main.Trivial GHC.Base.String)
                   (c :: Main.Two Main.Trivial GHC.Base.String) ->
                 case a of wild { Main.Two x1 y1 ->
                 case b of wild1 { Main.Two x2 y2 ->
                 case c of wild2 { Main.Two x3 y3 ->
                 GHC.Base.eqString
                   (GHC.Base.++
                      @ GHC.Types.Char
                      y1
                      (GHC.Base.++ @ GHC.Types.Char y2 y3))
                   (GHC.Base.++
                      @ GHC.Types.Char
                      y1
                      (GHC.Base.++ @ GHC.Types.Char y2 y3)) } } }) -}
761a306f027c565c48596e8def946418
  main3 ::
    (Main.Two Main.Trivial GHC.Base.String
     -> Main.Two Main.Trivial GHC.Base.String
     -> Main.Two Main.Trivial GHC.Base.String
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Two Main.Trivial GHC.Base.String
                         -> Main.Two Main.Trivial GHC.Base.String
                         -> Main.Two Main.Trivial GHC.Base.String
                         -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.Two Main.Trivial GHC.Base.String)
                   @ (Main.Two Main.Trivial GHC.Base.String
                      -> Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
                   Main.$fShowTwo_$s$fShowTwo
                   Main.$s$fTestable(->)14
                     `cast`
                   ((<Main.Two Main.Trivial GHC.Base.String
                      -> Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Two
                                                                                                                                       Main.Trivial
                                                                                                                                       GHC.Base.String
                                                                                                                                     -> Main.Two
                                                                                                                                          Main.Trivial
                                                                                                                                          GHC.Base.String
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$fArbitraryTwo_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Two Main.Trivial [GHC.Types.Char]>_R))
                   Main.$s$fTestable(->)12
                   f
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
5ba1ee94c765565babb5fab9bae856ae
  main4 ::
    Main.Identity GHC.Base.String
    -> Main.Identity GHC.Base.String
    -> Main.Identity GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><L,U>,
     Unfolding: (\ (a :: Main.Identity GHC.Base.String)
                   (b :: Main.Identity GHC.Base.String)
                   (c :: Main.Identity GHC.Base.String) ->
                 GHC.Base.eqString
                   (GHC.Base.++
                      @ GHC.Types.Char
                      a `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                      (GHC.Base.++
                         @ GHC.Types.Char
                         b `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                         c `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)))
                   (GHC.Base.++
                      @ GHC.Types.Char
                      a `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                      (GHC.Base.++
                         @ GHC.Types.Char
                         b `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)
                         c `cast` (Main.N:Identity[0] <[GHC.Types.Char]>_R)))) -}
0ed5be5a99b67d936ebadde422cb45df
  main5 ::
    (Main.Identity GHC.Base.String
     -> Main.Identity GHC.Base.String
     -> Main.Identity GHC.Base.String
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Identity GHC.Base.String
                         -> Main.Identity GHC.Base.String
                         -> Main.Identity GHC.Base.String
                         -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.Identity GHC.Base.String)
                   @ (Main.Identity GHC.Base.String
                      -> Main.Identity GHC.Base.String -> GHC.Types.Bool)
                   Main.$fShowIdentity_$s$fShowIdentity
                   Main.$s$fTestable(->)3
                     `cast`
                   ((<Main.Identity GHC.Base.String
                      -> Main.Identity GHC.Base.String -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Identity
                                                                                                                                       GHC.Base.String
                                                                                                                                     -> Main.Identity
                                                                                                                                          GHC.Base.String
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$s$fTestable(->)5
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Identity [GHC.Types.Char]>_R))
                   Main.$s$fTestable(->)4
                   f
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
4ddf1fc0a32dbb7673d6491aaf252307
  main6 ::
    Main.Trivial -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: (\ (a :: Main.Trivial)
                   (b :: Main.Trivial)
                   (c :: Main.Trivial) ->
                 GHC.Types.True) -}
784b4638f53ffca6d0383fc3aeb1a6ad
  main7 ::
    (Main.Trivial -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Trivial
                         -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Main.Trivial
                   @ (Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
                   Main.$fShowTrivial
                   Main.$s$fTestable(->)18
                     `cast`
                   ((<Main.Trivial -> Main.Trivial -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Trivial
                                                                                                                                     -> Main.Trivial
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Trivial>_R))
                   Main.$fArbitraryTrivial_$cshrink
                   f
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
f7a71a819632450ceb6015ebd5209862
  main8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Identity]
  = Main.$fArbitraryIdentity
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Trivial]
  = Main.$fArbitraryTrivial
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Two]
  = Main.$fArbitraryTwo
instance [safe] GHC.Classes.Eq [Main.Identity] = Main.$fEqIdentity
instance [safe] GHC.Classes.Eq [Main.Trivial] = Main.$fEqTrivial
instance [safe] GHC.Classes.Eq [Main.Two] = Main.$fEqTwo
instance [safe] GHC.Base.Semigroup [Main.Identity]
  = Main.$fSemigroupIdentity
instance [safe] GHC.Base.Semigroup [Main.Trivial]
  = Main.$fSemigroupTrivial
instance [safe] GHC.Base.Semigroup [Main.Two] = Main.$fSemigroupTwo
instance [safe] GHC.Show.Show [Main.Identity] = Main.$fShowIdentity
instance [safe] GHC.Show.Show [Main.Trivial] = Main.$fShowTrivial
instance [safe] GHC.Show.Show [Main.Two] = Main.$fShowTwo
"SPEC $carbitrary @ Trivial @ [Char]" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                               [GHC.Types.Char])
                                             ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                Main.Trivial)
  Main.$fArbitraryTwo1 @ Main.Trivial
                       @ [GHC.Types.Char]
                       $dArbitrary1
                       $dArbitrary
  = Main.$fArbitraryTwo_$s$carbitrary
"SPEC $cshow @ Trivial @ [Char]" forall ($dShow :: GHC.Show.Show
                                                     [GHC.Types.Char])
                                        ($dShow1 :: GHC.Show.Show Main.Trivial)
  Main.$fShowTwo_$cshow @ Main.Trivial
                        @ [GHC.Types.Char]
                        $dShow1
                        $dShow
  = Main.$fShowTwo_$s$cshow
"SPEC $cshow @ [Char]" forall ($dShow :: GHC.Show.Show
                                           [GHC.Types.Char])
  Main.$fShowIdentity_$cshow @ [GHC.Types.Char] $dShow
  = Main.$fShowIdentity_$s$cshow
"SPEC $cshowList @ Trivial @ [Char]" forall ($dShow :: GHC.Show.Show
                                                         [GHC.Types.Char])
                                            ($dShow1 :: GHC.Show.Show Main.Trivial)
  Main.$fShowTwo_$cshowList @ Main.Trivial
                            @ [GHC.Types.Char]
                            $dShow1
                            $dShow
  = Main.$fShowTwo_$s$cshowList
"SPEC $cshowList @ [Char]" forall ($dShow :: GHC.Show.Show
                                               [GHC.Types.Char])
  Main.$fShowIdentity_$cshowList @ [GHC.Types.Char] $dShow
  = Main.$fShowIdentity_$s$cshowList
"SPEC $cshowsPrec @ Trivial @ [Char]" forall ($dShow :: GHC.Show.Show
                                                          [GHC.Types.Char])
                                             ($dShow1 :: GHC.Show.Show Main.Trivial)
  Main.$fShowTwo_$cshowsPrec @ Main.Trivial
                             @ [GHC.Types.Char]
                             $dShow1
                             $dShow
  = Main.$fShowTwo_$s$cshowsPrec
"SPEC $cshowsPrec @ [Char]" forall ($dShow :: GHC.Show.Show
                                                [GHC.Types.Char])
  Main.$fShowIdentity_$cshowsPrec @ [GHC.Types.Char] $dShow
  = Main.$fShowIdentity_$s$cshowsPrec
"SPEC $fShowIdentity @ [Char]" forall ($dShow :: GHC.Show.Show
                                                   [GHC.Types.Char])
  Main.$fShowIdentity @ [GHC.Types.Char] $dShow
  = Main.$fShowIdentity_$s$fShowIdentity
"SPEC $fShowTwo @ Trivial @ [Char]" forall ($dShow :: GHC.Show.Show
                                                        [GHC.Types.Char])
                                           ($dShow1 :: GHC.Show.Show Main.Trivial)
  Main.$fShowTwo @ Main.Trivial @ [GHC.Types.Char] $dShow1 $dShow
  = Main.$fShowTwo_$s$fShowTwo
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

