
==================== FINAL INTERFACE ====================
2018-09-02 18:55:45.370032 UTC

interface main:Main 8043
  interface hash: 735aca117afe2580657669cbcf035ae5
  ABI hash: b03a6bc8a0a5242f6bf27874cd909fc8
  export-list hash: 1ecae6be2ced624a738cee991e51dfac
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1d513c99c87e91d88a611f1c4d76ff0e
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: QuickCheck-2.11.3 array-0.5.2.0
                      base-4.11.1.0* containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1
                      template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.11.3:Test.QuickCheck 8597fb70e0afba5fb9d4ded03a4b1b62
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Arbitrary 4df33de46388caa5cd1ba81ee16f6b92
import  -/  QuickCheck-2.11.3:Test.QuickCheck.Test 4bcdfba8853ed701d2281003a6c74081
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
c282a018343d81ac00dbabca3541e23e
  $fArbitraryFirstId ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Main.FirstId a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Main.FirstId a)
                  (Main.$fArbitraryFirstId1 @ a v)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.FirstId a>_R))
                  (\ (ds :: Main.FirstId a) -> GHC.Types.[] @ (Main.FirstId a)) -}
c282a018343d81ac00dbabca3541e23e
  $fArbitraryFirstId1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.FirstId a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$carbitrary @ a w ww1 ww2 ww3 ww4 w2 }) -}
d4a49faa6eb8026b67f39bc4042591f3
  $fArbitraryFirstId2 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$carbitrary1 @ a w ww1 ww2 ww3 ww4 w2 }) -}
3749b00b514ffbece4fc43f7d3ac1d3f
  $fArbitraryFirstId_$s$carbitrary ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Main.FirstId GHC.Integer.Type.Integer
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$w$s$carbitrary ww1 ww2 ww3 ww4 ww8 } }) -}
d4a49faa6eb8026b67f39bc4042591f3
  $fArbitraryIdentity ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Main.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Main.Identity a)
                  (Main.$fArbitraryFirstId2 @ a v)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Identity a>_R))
                  (\ (ds :: Main.Identity a) -> GHC.Types.[] @ (Main.Identity a)) -}
953276325b54b4eece34870865cf2f51
  $fArbitraryLastId ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Main.LastId a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Main.LastId a)
                  (Main.$fArbitraryLastId1 @ a v)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.LastId a>_R))
                  (\ (ds :: Main.LastId a) -> GHC.Types.[] @ (Main.LastId a)) -}
953276325b54b4eece34870865cf2f51
  $fArbitraryLastId1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.LastId a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$carbitrary2 @ a w ww1 ww2 ww3 ww4 w2 }) -}
0a69b649bb9be61f8ec5badba81c4b62
  $fArbitraryLastId_$s$carbitrary ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Main.LastId GHC.Integer.Type.Integer
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { GHC.Types.I# ww8 ->
                 Main.$w$s$carbitrary2 ww1 ww2 ww3 ww4 ww8 } }) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fArbitraryTrivial ::
    Test.QuickCheck.Arbitrary.Arbitrary Main.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Trivial
                  Main.$fArbitraryTrivial1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Trivial>_R))
                  Main.$fArbitraryTrivial_$cshrink -}
765ecc558e2054bfa87e2240bd2c06b6
  $fArbitraryTrivial1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                 Main.Trivial) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fArbitraryTrivial_$cshrink :: Main.Trivial -> [Main.Trivial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.Trivial) -> GHC.Types.[] @ Main.Trivial) -}
f1586423fbfcb907945af69925fd42c0
  $fArbitraryTwo ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Main.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      (v1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Main.Two a b)
                  (Main.$fArbitraryTwo1 @ a @ b v v1)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Two a b>_R))
                  (\ (ds :: Main.Two a b) -> GHC.Types.[] @ (Main.Two a b)) -}
f1586423fbfcb907945af69925fd42c0
  $fArbitraryTwo1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Main.Two a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$w$carbitrary3
                        @ a
                        @ b
                        w
                        w1
                        ww1
                        ww2
                        ww3
                        ww4
                        w3 of ww7 { (#,#) ww8 ww9 ->
                 Main.Two @ a @ b ww8 ww9 } }) -}
9654e6b7745147563d06b17aa237c67f
  $fArbitraryTwo_$s$carbitrary ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Main.Two Main.Trivial [GHC.Types.Char]
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$w$s$carbitrary3
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,#) ww8 ww9 ->
                 Main.Two @ Main.Trivial @ [GHC.Types.Char] ww8 ww9 } }) -}
c282a018343d81ac00dbabca3541e23e
  $fEqFirstId :: GHC.Classes.Eq a => GHC.Classes.Eq (Main.FirstId a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Main.FirstId a)
                  (GHC.Classes.== @ a v)
                    `cast`
                  ((Sym (Main.N:Identity[0] <a>_R) ; Sym (Main.N:FirstId[0]) <a>_N)
                   ->_R (Sym (Main.N:Identity[0]
                                  <a>_R) ; Sym (Main.N:FirstId[0]) <a>_N)
                   ->_R <GHC.Types.Bool>_R)
                  (GHC.Classes./= @ a v)
                    `cast`
                  ((Sym (Main.N:Identity[0] <a>_R) ; Sym (Main.N:FirstId[0]) <a>_N)
                   ->_R (Sym (Main.N:Identity[0]
                                  <a>_R) ; Sym (Main.N:FirstId[0]) <a>_N)
                   ->_R <GHC.Types.Bool>_R) -}
d4a49faa6eb8026b67f39bc4042591f3
  $fEqIdentity ::
    GHC.Classes.Eq a => GHC.Classes.Eq (Main.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Main.Identity a)
                  (GHC.Classes.== @ a v)
                    `cast`
                  (Sym (Main.N:Identity[0] <a>_R)
                   ->_R Sym (Main.N:Identity[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (GHC.Classes./= @ a v)
                    `cast`
                  (Sym (Main.N:Identity[0] <a>_R)
                   ->_R Sym (Main.N:Identity[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R) -}
953276325b54b4eece34870865cf2f51
  $fEqLastId :: GHC.Classes.Eq a => GHC.Classes.Eq (Main.LastId a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Main.LastId a)
                  (GHC.Classes.== @ a v)
                    `cast`
                  ((Sym (Main.N:Identity[0] <a>_R) ; Sym (Main.N:LastId[0]) <a>_N)
                   ->_R (Sym (Main.N:Identity[0]
                                  <a>_R) ; Sym (Main.N:LastId[0]) <a>_N)
                   ->_R <GHC.Types.Bool>_R)
                  (GHC.Classes./= @ a v)
                    `cast`
                  ((Sym (Main.N:Identity[0] <a>_R) ; Sym (Main.N:LastId[0]) <a>_N)
                   ->_R (Sym (Main.N:Identity[0]
                                  <a>_R) ; Sym (Main.N:LastId[0]) <a>_N)
                   ->_R <GHC.Types.Bool>_R) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fEqTrivial :: GHC.Classes.Eq Main.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Trivial Main.$fEqTrivial_$c== Main.$fEqTrivial_$c/= -}
765ecc558e2054bfa87e2240bd2c06b6
  $fEqTrivial_$c/= :: Main.Trivial -> Main.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Main.Trivial) (y :: Main.Trivial) ->
                 case x of wild { Main.Trivial ->
                 case y of wild1 { Main.Trivial -> GHC.Types.False } }) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fEqTrivial_$c== :: Main.Trivial -> Main.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Trivial) (ds1 :: Main.Trivial) ->
                 case ds of wild { Main.Trivial ->
                 case ds1 of wild1 { Main.Trivial -> GHC.Types.True } }) -}
f1586423fbfcb907945af69925fd42c0
  $fEqTwo ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    GHC.Classes.Eq (Main.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Classes.Eq a)
                      (v1 :: GHC.Classes.Eq b).
                  @ (Main.Two a b)
                  (Main.$fEqTwo_$c== @ a @ b v v1)
                  (Main.$fEqTwo_$c/= @ a @ b v v1) -}
f1586423fbfcb907945af69925fd42c0
  $fEqTwo_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Main.Two a b -> Main.Two a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   (x :: Main.Two a b)
                   (y :: Main.Two a b) ->
                 case x of wild { Main.Two a1 a2 ->
                 case y of wild1 { Main.Two b1 b2 ->
                 case GHC.Classes.== @ a $dEq a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.== @ b $dEq1 a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
f1586423fbfcb907945af69925fd42c0
  $fEqTwo_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    Main.Two a b -> Main.Two a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Classes.Eq b)
                   (w2 :: Main.Two a b)
                   (w3 :: Main.Two a b) ->
                 case w2 of ww { Main.Two ww1 ww2 ->
                 case w3 of ww3 { Main.Two ww4 ww5 ->
                 Main.$w$c== @ a @ b w w1 ww1 ww2 ww4 ww5 } }) -}
c282a018343d81ac00dbabca3541e23e
  $fSemigroupFirstId :: GHC.Base.Semigroup (Main.FirstId a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Main.FirstId a)
                  (Main.$fSemigroupFirstId_$c<> @ a)
                  (Main.$fSemigroupFirstId_$csconcat @ a)
                  (Main.$fSemigroupFirstId_$cstimes @ a) -}
c282a018343d81ac00dbabca3541e23e
  $fSemigroupFirstId_$c<> ::
    Main.FirstId a -> Main.FirstId a -> Main.FirstId a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a (ds :: Main.FirstId a) (ds1 :: Main.FirstId a) -> ds) -}
c282a018343d81ac00dbabca3541e23e
  $fSemigroupFirstId_$csconcat ::
    GHC.Base.NonEmpty (Main.FirstId a) -> Main.FirstId a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: GHC.Base.NonEmpty (Main.FirstId a)) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 case as of wild1 { DEFAULT -> a1 } }) -}
c282a018343d81ac00dbabca3541e23e
  $fSemigroupFirstId_$cstimes ::
    GHC.Real.Integral b => b -> Main.FirstId a -> Main.FirstId a
  {- Arity: 1, Strictness: <L,U> -}
953276325b54b4eece34870865cf2f51
  $fSemigroupLastId :: GHC.Base.Semigroup (Main.LastId a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Main.LastId a)
                  (Main.$fSemigroupLastId_$c<> @ a)
                  (Main.$fSemigroupLastId_$csconcat @ a)
                  (Main.$fSemigroupLastId_$cstimes @ a) -}
953276325b54b4eece34870865cf2f51
  $fSemigroupLastId1 ::
    Main.LastId a -> [Main.LastId a] -> Main.LastId a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
953276325b54b4eece34870865cf2f51
  $fSemigroupLastId_$c<> ::
    Main.LastId a -> Main.LastId a -> Main.LastId a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a (ds :: Main.LastId a) (ds1 :: Main.LastId a) -> ds1) -}
953276325b54b4eece34870865cf2f51
  $fSemigroupLastId_$csconcat ::
    GHC.Base.NonEmpty (Main.LastId a) -> Main.LastId a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: GHC.Base.NonEmpty (Main.LastId a)) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 Main.$fSemigroupLastId1 @ a a1 as }) -}
953276325b54b4eece34870865cf2f51
  $fSemigroupLastId_$cstimes ::
    GHC.Real.Integral b => b -> Main.LastId a -> Main.LastId a
  {- Arity: 1, Strictness: <L,U> -}
765ecc558e2054bfa87e2240bd2c06b6
  $fSemigroupTrivial :: GHC.Base.Semigroup Main.Trivial
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Trivial
                  Main.$fSemigroupTrivial_$c<>
                  Main.$fSemigroupTrivial_$csconcat
                  Main.$fSemigroupTrivial_$cstimes -}
765ecc558e2054bfa87e2240bd2c06b6
  $fSemigroupTrivial_$c<> ::
    Main.Trivial -> Main.Trivial -> Main.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Main.Trivial) (ds1 :: Main.Trivial) -> Main.Trivial) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fSemigroupTrivial_$csconcat ::
    GHC.Base.NonEmpty Main.Trivial -> Main.Trivial
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(1*U(),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.NonEmpty Main.Trivial) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 case as of wild1 { [] -> a1 : c cs -> Main.Trivial } }) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fSemigroupTrivial_$cstimes ::
    GHC.Real.Integral b => b -> Main.Trivial -> Main.Trivial
  {- Arity: 1, Strictness: <L,U> -}
f1586423fbfcb907945af69925fd42c0
  $fSemigroupTwo ::
    (GHC.Base.Semigroup a, GHC.Base.Semigroup b) =>
    GHC.Base.Semigroup (Main.Two a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Base.Semigroup a)
                      (v1 :: GHC.Base.Semigroup b).
                  @ (Main.Two a b)
                  (Main.$fSemigroupTwo_$c<> @ a @ b v v1)
                  (Main.$fSemigroupTwo_$csconcat @ a @ b v v1)
                  (Main.$fSemigroupTwo_$cstimes @ a @ b v v1) -}
f1586423fbfcb907945af69925fd42c0
  $fSemigroupTwo_$c<> ::
    (GHC.Base.Semigroup a, GHC.Base.Semigroup b) =>
    Main.Two a b -> Main.Two a b -> Main.Two a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dSemigroup :: GHC.Base.Semigroup a)
                   ($dSemigroup1 :: GHC.Base.Semigroup b)
                   (ds :: Main.Two a b)
                   (ds1 :: Main.Two a b) ->
                 case ds of wild { Main.Two x1 y1 ->
                 case ds1 of wild1 { Main.Two x2 y2 ->
                 Main.Two
                   @ a
                   @ b
                   (GHC.Base.<> @ a $dSemigroup x1 x2)
                   (GHC.Base.<> @ b $dSemigroup1 y1 y2) } }) -}
f1586423fbfcb907945af69925fd42c0
  $fSemigroupTwo_$csconcat ::
    (GHC.Base.Semigroup a, GHC.Base.Semigroup b) =>
    GHC.Base.NonEmpty (Main.Two a b) -> Main.Two a b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S(SS),1*U(1*U(U,U),1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Base.Semigroup a)
                   (w1 :: GHC.Base.Semigroup b)
                   (w2 :: GHC.Base.NonEmpty (Main.Two a b)) ->
                 case w2 of ww { GHC.Base.:| ww1 ww2 ->
                 case ww1 of ww3 { Main.Two ww4 ww5 ->
                 case Main.$w$csconcat
                        @ a
                        @ b
                        w
                        w1
                        ww4
                        ww5
                        ww2 of ww6 { (#,#) ww7 ww8 ->
                 Main.Two @ a @ b ww7 ww8 } } }) -}
f1586423fbfcb907945af69925fd42c0
  $fSemigroupTwo_$cstimes ::
    (GHC.Base.Semigroup a, GHC.Base.Semigroup b) =>
    forall b1.
    GHC.Real.Integral b1 =>
    b1 -> Main.Two a b -> Main.Two a b
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U> -}
c282a018343d81ac00dbabca3541e23e
  $fShowFirstId :: GHC.Show.Show a => GHC.Show.Show (Main.FirstId a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Main.FirstId a)
                  (Main.$fShowFirstId_$cshowsPrec @ a v)
                  (Main.$fShowFirstId_$cshow @ a v)
                  (Main.$fShowFirstId_$cshowList @ a v) -}
5030e271a45b4c1d825bfa144ab6d325
  $fShowFirstId1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
841127016b6f062a640be67657fba3c0
  $fShowFirstId2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowFirstId3) -}
249d493480a35463f129d367cbafbcd6
  $fShowFirstId3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
efe11549270b68b39308884408e70e2f
  $fShowFirstId4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowFirstId5) -}
aba543cd1ab137da8881bccc37679989
  $fShowFirstId5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Identity "#) -}
5b6425366f351e0ea797c45238d491b1
  $fShowFirstId6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("getFirst = "#) -}
6855745638ad4a942ea09208b9813bc5
  $fShowFirstId7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FirstId {"#) -}
8ce7a3e7e828e6b420c27f3671c24a42
  $fShowFirstId8 ::
    Main.FirstId GHC.Integer.Type.Integer -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (w :: Main.FirstId GHC.Integer.Type.Integer)
                   (w1 :: GHC.Base.String) ->
                 Main.$w$s$cshowsPrec 0# w w1) -}
94f06f22ade098c23a6c6c6879ab2d2a
  $fShowFirstId9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
c282a018343d81ac00dbabca3541e23e
  $fShowFirstId_$cshow ::
    GHC.Show.Show a => Main.FirstId a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Main.FirstId a) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowFirstId7
                   (GHC.CString.unpackAppendCString#
                      Main.$fShowFirstId6
                      (GHC.Base.++
                         @ GHC.Types.Char
                         Main.$fShowFirstId4
                         (GHC.Show.showsPrec
                            @ a
                            $dShow
                            Main.$fShowFirstId9
                            x `cast` (Main.N:FirstId[0] <a>_N ; Main.N:Identity[0] <a>_R)
                            Main.$fShowFirstId2)))) -}
c282a018343d81ac00dbabca3541e23e
  $fShowFirstId_$cshowList ::
    GHC.Show.Show a => [Main.FirstId a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Main.FirstId a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.FirstId a)
                   (Main.$fShowFirstId_$cshowsPrec @ a $dShow Main.$fShowFirstId1)
                   ls
                   s) -}
c282a018343d81ac00dbabca3541e23e
  $fShowFirstId_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Main.FirstId a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.FirstId a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec @ a w ww1 w2 }) -}
c282a018343d81ac00dbabca3541e23e
  $fShowFirstId_$s$cshow ::
    Main.FirstId GHC.Integer.Type.Integer -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: Main.FirstId GHC.Integer.Type.Integer) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowFirstId7
                   (GHC.CString.unpackAppendCString#
                      Main.$fShowFirstId6
                      (GHC.Base.++
                         @ GHC.Types.Char
                         Main.$fShowFirstId4
                         (case GHC.Show.$w$cshowsPrec4
                                 11#
                                 x `cast`
                                 (Main.N:FirstId[0] <GHC.Integer.Type.Integer>_N ; Main.N:Identity[0]
                                                                                       <GHC.Integer.Type.Integer>_R)
                                 Main.$fShowFirstId2 of ww2 { (#,#) ww3 ww4 ->
                          GHC.Types.: @ GHC.Types.Char ww3 ww4 })))) -}
7ec12b0b1e3a73d550b316c1cd535a24
  $fShowFirstId_$s$cshowList ::
    [Main.FirstId GHC.Integer.Type.Integer] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.FirstId GHC.Integer.Type.Integer])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.FirstId GHC.Integer.Type.Integer)
                   Main.$fShowFirstId8
                   ls
                   s) -}
c282a018343d81ac00dbabca3541e23e
  $fShowFirstId_$s$cshowsPrec ::
    GHC.Types.Int
    -> Main.FirstId GHC.Integer.Type.Integer -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.FirstId GHC.Integer.Type.Integer)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$s$cshowsPrec ww1 w1 w2 }) -}
c282a018343d81ac00dbabca3541e23e
  $fShowFirstId_$s$fShowFirstId ::
    GHC.Show.Show (Main.FirstId GHC.Integer.Type.Integer)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Main.FirstId GHC.Integer.Type.Integer)
                  Main.$fShowFirstId_$s$cshowsPrec
                  Main.$fShowFirstId_$s$cshow
                  (\ (ls :: [Main.FirstId GHC.Integer.Type.Integer])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Main.FirstId GHC.Integer.Type.Integer)
                     (Main.$fShowFirstId_$s$cshowsPrec Main.$fShowFirstId1)
                     ls
                     s) -}
d4a49faa6eb8026b67f39bc4042591f3
  $fShowIdentity ::
    GHC.Show.Show a => GHC.Show.Show (Main.Identity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Main.Identity a)
                  (Main.$fShowIdentity_$cshowsPrec @ a v)
                  (Main.$fShowIdentity_$cshow @ a v)
                  (Main.$fShowIdentity_$cshowList @ a v) -}
d4a49faa6eb8026b67f39bc4042591f3
  $fShowIdentity_$cshow ::
    GHC.Show.Show a => Main.Identity a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Main.Identity a) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowFirstId4)
                   (GHC.Show.showsPrec
                      @ a
                      $dShow
                      Main.$fShowFirstId9
                      x `cast` (Main.N:Identity[0] <a>_R)
                      (GHC.Types.[] @ GHC.Types.Char))) -}
d4a49faa6eb8026b67f39bc4042591f3
  $fShowIdentity_$cshowList ::
    GHC.Show.Show a => [Main.Identity a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Main.Identity a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Identity a)
                   (Main.$fShowIdentity_$cshowsPrec @ a $dShow Main.$fShowFirstId1)
                   ls
                   s) -}
d4a49faa6eb8026b67f39bc4042591f3
  $fShowIdentity_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Main.Identity a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.Identity a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec1 @ a w ww1 w2 }) -}
953276325b54b4eece34870865cf2f51
  $fShowLastId :: GHC.Show.Show a => GHC.Show.Show (Main.LastId a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Main.LastId a)
                  (Main.$fShowLastId_$cshowsPrec @ a v)
                  (Main.$fShowLastId_$cshow @ a v)
                  (Main.$fShowLastId_$cshowList @ a v) -}
395f446d1ec31dac4ddb76c1f9f16ed4
  $fShowLastId1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("getLast = "#) -}
ac0adb06020c19c02c7816ce8d0ce77f
  $fShowLastId2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LastId {"#) -}
533914ed347f145f093fad17c5fd2841
  $fShowLastId3 ::
    Main.LastId GHC.Integer.Type.Integer -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (w :: Main.LastId GHC.Integer.Type.Integer)
                   (w1 :: GHC.Base.String) ->
                 Main.$w$s$cshowsPrec2 0# w w1) -}
953276325b54b4eece34870865cf2f51
  $fShowLastId_$cshow ::
    GHC.Show.Show a => Main.LastId a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Main.LastId a) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowLastId2
                   (GHC.CString.unpackAppendCString#
                      Main.$fShowLastId1
                      (GHC.Base.++
                         @ GHC.Types.Char
                         Main.$fShowFirstId4
                         (GHC.Show.showsPrec
                            @ a
                            $dShow
                            Main.$fShowFirstId9
                            x `cast` (Main.N:LastId[0] <a>_N ; Main.N:Identity[0] <a>_R)
                            Main.$fShowFirstId2)))) -}
953276325b54b4eece34870865cf2f51
  $fShowLastId_$cshowList ::
    GHC.Show.Show a => [Main.LastId a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Main.LastId a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.LastId a)
                   (Main.$fShowLastId_$cshowsPrec @ a $dShow Main.$fShowFirstId1)
                   ls
                   s) -}
953276325b54b4eece34870865cf2f51
  $fShowLastId_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Main.LastId a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Main.LastId a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec2 @ a w ww1 w2 }) -}
953276325b54b4eece34870865cf2f51
  $fShowLastId_$s$cshow ::
    Main.LastId GHC.Integer.Type.Integer -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: Main.LastId GHC.Integer.Type.Integer) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowLastId2
                   (GHC.CString.unpackAppendCString#
                      Main.$fShowLastId1
                      (GHC.Base.++
                         @ GHC.Types.Char
                         Main.$fShowFirstId4
                         (case GHC.Show.$w$cshowsPrec4
                                 11#
                                 x `cast`
                                 (Main.N:LastId[0] <GHC.Integer.Type.Integer>_N ; Main.N:Identity[0]
                                                                                      <GHC.Integer.Type.Integer>_R)
                                 Main.$fShowFirstId2 of ww2 { (#,#) ww3 ww4 ->
                          GHC.Types.: @ GHC.Types.Char ww3 ww4 })))) -}
8e4970b27d27e0187354f370e2070615
  $fShowLastId_$s$cshowList ::
    [Main.LastId GHC.Integer.Type.Integer] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.LastId GHC.Integer.Type.Integer])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.LastId GHC.Integer.Type.Integer)
                   Main.$fShowLastId3
                   ls
                   s) -}
953276325b54b4eece34870865cf2f51
  $fShowLastId_$s$cshowsPrec ::
    GHC.Types.Int
    -> Main.LastId GHC.Integer.Type.Integer -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.LastId GHC.Integer.Type.Integer)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$s$cshowsPrec2 ww1 w1 w2 }) -}
953276325b54b4eece34870865cf2f51
  $fShowLastId_$s$fShowLastId ::
    GHC.Show.Show (Main.LastId GHC.Integer.Type.Integer)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Main.LastId GHC.Integer.Type.Integer)
                  Main.$fShowLastId_$s$cshowsPrec
                  Main.$fShowLastId_$s$cshow
                  (\ (ls :: [Main.LastId GHC.Integer.Type.Integer])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Main.LastId GHC.Integer.Type.Integer)
                     (Main.$fShowLastId_$s$cshowsPrec Main.$fShowFirstId1)
                     ls
                     s) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fShowTrivial :: GHC.Show.Show Main.Trivial
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Trivial
                  Main.$fShowTrivial_$cshowsPrec
                  Main.$fShowTrivial_$cshow
                  Main.$fShowTrivial_$cshowList -}
765ecc558e2054bfa87e2240bd2c06b6
  $fShowTrivial1 :: Main.Trivial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Trivial) (eta :: GHC.Base.String) ->
                 case ds of wild { Main.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowTrivial2)
                   eta }) -}
9c97662d6ae4fc87d5f4bf6b0810be8d
  $fShowTrivial2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowTrivial3) -}
d06997e94737b6117ac672e25d820a27
  $fShowTrivial3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Trivial"#) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fShowTrivial_$cshow :: Main.Trivial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Trivial) ->
                 case x of wild { Main.Trivial -> Main.$fShowTrivial2 }) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fShowTrivial_$cshowList :: [Main.Trivial] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Trivial]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Trivial Main.$fShowTrivial1 ls s) -}
765ecc558e2054bfa87e2240bd2c06b6
  $fShowTrivial_$cshowsPrec ::
    GHC.Types.Int -> Main.Trivial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Main.Trivial)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild { Main.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowTrivial2)
                   eta }) -}
f1586423fbfcb907945af69925fd42c0
  $fShowTwo ::
    (GHC.Show.Show a, GHC.Show.Show b) => GHC.Show.Show (Main.Two a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      (v :: GHC.Show.Show a)
                      (v1 :: GHC.Show.Show b).
                  @ (Main.Two a b)
                  (Main.$fShowTwo_$cshowsPrec @ a @ b v v1)
                  (Main.$fShowTwo_$cshow @ a @ b v v1)
                  (Main.$fShowTwo_$cshowList @ a @ b v v1) -}
375bf166513be4f84dd2c3feccc4443f
  $fShowTwo1 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b
                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                   (n :: b)[OneShot] ->
                 GHC.CString.unpackFoldrCString# @ b "Two "# c n) -}
0077176ef96d7419766bbbc558be5bcd
  $fShowTwo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Two "#) -}
79c5e72b549a35b986bb48f59384453a
  $fShowTwo3 ::
    Main.Two Main.Trivial [GHC.Types.Char] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*H,1*U)><L,U>,
     Unfolding: (\ (w :: Main.Two Main.Trivial [GHC.Types.Char])
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Two ww1 ww2 ->
                 Main.$w$s$cshowsPrec3 0# ww1 ww2 w1 }) -}
fbddcbc14dc41e57010dc8e08a1af3ee
  $fShowTwo4 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f1586423fbfcb907945af69925fd42c0
  $fShowTwo_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    Main.Two a b -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (x :: Main.Two a b) ->
                 Main.$fShowTwo_$cshowsPrec
                   @ a
                   @ b
                   $dShow
                   $dShow1
                   Main.$fShowFirstId1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f1586423fbfcb907945af69925fd42c0
  $fShowTwo_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    [Main.Two a b] -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (ls :: [Main.Two a b])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Two a b)
                   (Main.$fShowTwo_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      Main.$fShowFirstId1)
                   ls
                   s) -}
f1586423fbfcb907945af69925fd42c0
  $fShowTwo_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Types.Int -> Main.Two a b -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Main.Two a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { Main.Two ww3 ww4 ->
                 Main.$w$cshowsPrec3 @ a @ b w w1 ww1 ww3 ww4 } }) -}
597a2e81e9e8aedcf9e244cfa816d45e
  $fShowTwo_$s$cshow ::
    Main.Two Main.Trivial [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*H,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Two Main.Trivial [GHC.Types.Char]) ->
                 case w of ww { Main.Two ww1 ww2 -> Main.$w$s$cshow ww1 ww2 }) -}
221f8a5f8de441a71f6776ab7f514585
  $fShowTwo_$s$cshowList ::
    [Main.Two Main.Trivial [GHC.Types.Char]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Two Main.Trivial [GHC.Types.Char]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.Two Main.Trivial [GHC.Types.Char])
                   Main.$fShowTwo3
                   ls
                   s) -}
f1586423fbfcb907945af69925fd42c0
  $fShowTwo_$s$cshowsPrec ::
    GHC.Types.Int
    -> Main.Two Main.Trivial [GHC.Types.Char] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*H,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Two Main.Trivial [GHC.Types.Char])
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Two ww3 ww4 ->
                 Main.$w$s$cshowsPrec3 ww1 ww3 ww4 w2 } }) -}
f1586423fbfcb907945af69925fd42c0
  $fShowTwo_$s$fShowTwo ::
    GHC.Show.Show (Main.Two Main.Trivial [GHC.Types.Char])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Main.Two Main.Trivial [GHC.Types.Char])
                  Main.$fShowTwo_$s$cshowsPrec
                  (\ (x :: Main.Two Main.Trivial [GHC.Types.Char]) ->
                   case x of wild { Main.Two b1 b2 ->
                   case GHC.Classes.geInt
                          Main.$fShowFirstId1
                          Main.$fShowFirstId9 of wild1 {
                     GHC.Types.False
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          Main.$fShowTwo1
                          (case b1 of wild2 { Main.Trivial ->
                           GHC.Base.augment
                             @ GHC.Types.Char
                             (\ @ b
                                (c :: GHC.Types.Char -> b -> b)[OneShot]
                                (n :: b)[OneShot] ->
                              GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowTrivial2)
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b2
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.[] @ GHC.Types.Char))))) })
                     GHC.Types.True
                     -> GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.$fShow(,)4
                          (GHC.Base.augment
                             @ GHC.Types.Char
                             Main.$fShowTwo1
                             (case b1 of wild2 { Main.Trivial ->
                              GHC.Base.augment
                                @ GHC.Types.Char
                                (\ @ b
                                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                                   (n :: b)[OneShot] ->
                                 GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowTrivial2)
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Show.showLitString
                                         b2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)3
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.$fShow(,)2
                                               (GHC.Types.[] @ GHC.Types.Char)))))) })) } })
                  (\ (ls :: [Main.Two Main.Trivial [GHC.Types.Char]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Main.Two Main.Trivial [GHC.Types.Char])
                     (Main.$fShowTwo_$s$cshowsPrec Main.$fShowFirstId1)
                     ls
                     s) -}
ac906e37aa7b8c3af8915a61b8734c39
  $s$fTestable(->)10 ::
    Main.LastId GHC.Integer.Type.Integer
    -> [Main.LastId GHC.Integer.Type.Integer]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.LastId GHC.Integer.Type.Integer) ->
                 GHC.Types.[] @ (Main.LastId GHC.Integer.Type.Integer)) -}
4e084c044bb62dce11dd56c59f838cea
  $s$fTestable(->)11 ::
    (Main.LastId GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.LastId GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable3 w ww1 ww2 ww3 ww4 w2 }) -}
02aa597680db5af8957635cc31da6c17
  $s$fTestable(->)16 ::
    (Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable4 w ww1 ww2 ww3 ww4 w2 }) -}
3609837ed7b110bea795bcdd781e25d3
  $s$fTestable(->)17 ::
    Main.Two Main.Trivial [GHC.Types.Char]
    -> [Main.Two Main.Trivial [GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.Two Main.Trivial [GHC.Types.Char]) ->
                 GHC.Types.[] @ (Main.Two Main.Trivial [GHC.Types.Char])) -}
15bd95c1ba31ef868b6705c4638ef0cb
  $s$fTestable(->)19 ::
    (Main.Two Main.Trivial GHC.Base.String
     -> Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Two Main.Trivial GHC.Base.String
                         -> Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable5 w ww1 ww2 ww3 ww4 w2 }) -}
fe3d411b1196702b3c3d7275bf682229
  $s$fTestable(->)21 ::
    (Main.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Trivial -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable6 w ww1 ww2 ww3 ww4 w2 }) -}
9ed65b63f17249a0c3d71a8acbb59e67
  $s$fTestable(->)23 ::
    (Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable7 w ww1 ww2 ww3 ww4 w2 }) -}
25172d719600593fec3fcf2c8254c0af
  $s$fTestable(->)3 ::
    (Main.FirstId GHC.Integer.Type.Integer
     -> Main.FirstId GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.FirstId GHC.Integer.Type.Integer
                         -> Main.FirstId GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable w ww1 ww2 ww3 ww4 w2 }) -}
33f9d9a241a29f9ad8d4fec7efac4104
  $s$fTestable(->)4 ::
    Main.FirstId GHC.Integer.Type.Integer
    -> [Main.FirstId GHC.Integer.Type.Integer]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.FirstId GHC.Integer.Type.Integer) ->
                 GHC.Types.[] @ (Main.FirstId GHC.Integer.Type.Integer)) -}
863e6189550540297c5d8fd03f9b270b
  $s$fTestable(->)5 ::
    (Main.FirstId GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.FirstId GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable1 w ww1 ww2 ww3 ww4 w2 }) -}
a7f23b85ad77baa86dd7b067f23fe8aa
  $s$fTestable(->)9 ::
    (Main.LastId GHC.Integer.Type.Integer
     -> Main.LastId GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.LastId GHC.Integer.Type.Integer
                         -> Main.LastId GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable2 w ww1 ww2 ww3 ww4 w2 }) -}
94c5a2fd146702c2616a52a4c8ecefce
  $tc'FirstId :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4333450446449857316##
                   11410325233242248676##
                   Main.$trModule
                   Main.$tc'FirstId2
                   1#
                   Main.$tc'FirstId1) -}
197f77fabbb74148087cab28e6fa8408
  $tc'FirstId1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
55d1b7b6c9e076439a2461db1cb536d9
  $tc'FirstId2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'FirstId3) -}
7b7e9e806cf0f8280d5806e5d52594b5
  $tc'FirstId3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FirstId"#) -}
0bd5949baa9edb5f640992311c2c884b
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14933744756080264347##
                   10325705257141500534##
                   Main.$trModule
                   Main.$tc'Identity2
                   1#
                   Main.$tc'Identity1) -}
06dc3a95b0f8e52b98fab182ef8e5788
  $tc'Identity1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c0dada2b15ae1f43367d2a7b838263f7
  $tc'Identity2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Identity3) -}
135186636ef9703f9f3dd552c37781d3
  $tc'Identity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Identity"#) -}
f0d10d5879f726684f86aae44da91dce
  $tc'LastId :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9891883984605374754##
                   16316206361395881864##
                   Main.$trModule
                   Main.$tc'LastId2
                   1#
                   Main.$tc'LastId1) -}
b8bcb8e1de5ca28ca2cf6c9d0c605cde
  $tc'LastId1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9c8550e1fddb4a18aa501e488f3dca0d
  $tc'LastId2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'LastId3) -}
7fe6e5d9f444963db9e63622d020945d
  $tc'LastId3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LastId"#) -}
865596e2a382e2ffc4e2279f155fca86
  $tc'Trivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6457485729114745029##
                   3003837664020060680##
                   Main.$trModule
                   Main.$tc'Trivial2
                   0#
                   Main.$tc'Trivial1) -}
bf0003566bd066a9bceca4284b805808
  $tc'Trivial1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
ced5b10fb46dbe391811a136eba6ea94
  $tc'Trivial2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Trivial3) -}
6d59c0ee9fb6f34981689780a757bfe9
  $tc'Trivial3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Trivial"#) -}
af7e5c2c7aff56ddb76f82c12354dedd
  $tc'Two :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7581589987092827629##
                   15326290315829168296##
                   Main.$trModule
                   Main.$tc'Two2
                   2#
                   Main.$tc'Two1) -}
263c9ff8106bd8bcb42bd9cf5393dd06
  $tc'Two1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d993e58b5bc8d748892b5c5eba295026
  $tc'Two2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Two3) -}
7922cbd6d9971a2b40cd163a36de2a94
  $tc'Two3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Two"#) -}
1488b0879816c2020ff27d63db8d5d98
  $tcFirstId :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6353781177414666348##
                   9754104563207513178##
                   Main.$trModule
                   Main.$tcFirstId1
                   0#
                   GHC.Types.krep$*Arr*) -}
ac2cb0844d311f034d853b1c3dc6f578
  $tcFirstId1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcFirstId2) -}
7d471c13aee5a42f86f79710d2561344
  $tcFirstId2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FirstId"#) -}
28672504a208deaa7f40fff68130c41f
  $tcIdentity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13554781859897037554##
                   14585010631131321658##
                   Main.$trModule
                   Main.$tcIdentity1
                   0#
                   GHC.Types.krep$*Arr*) -}
4f408214dfe53a1936d344880a32cd2f
  $tcIdentity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcIdentity2) -}
e7a6f380740600ebf601298965149762
  $tcIdentity2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Identity"#) -}
e60eaabac827b6820ea103fc88b66224
  $tcLastId :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14985996015145336673##
                   16476965990022640189##
                   Main.$trModule
                   Main.$tcLastId1
                   0#
                   GHC.Types.krep$*Arr*) -}
3cb2dd349cbb75a83059c35dc628d56d
  $tcLastId1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcLastId2) -}
0dbc55abd443dfbf8dc499337f0e1d4f
  $tcLastId2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LastId"#) -}
ce72783dfe6d921c74b926152e31d187
  $tcTrivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1488722916004492003##
                   5561506386658536138##
                   Main.$trModule
                   Main.$tcTrivial1
                   0#
                   GHC.Types.krep$*) -}
87a4323a0ee6001afba3411933f97502
  $tcTrivial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$fShowTrivial3) -}
ca81e01de918985ec58e6b119a7d7465
  $tcTwo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2801403543926488040##
                   2925450971047963023##
                   Main.$trModule
                   Main.$tcTwo1
                   0#
                   GHC.Types.krep$*->*->*) -}
603f5e42414c66fbfbd589a0ee49455e
  $tcTwo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcTwo2) -}
da9b1d931c61c1a1efb3021b14514754
  $tcTwo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Two"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
d50546fc4edcba8daf67ed01826a03af
  $w$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b) =>
    a -> b -> a -> b -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Classes.Eq b)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: a)
                   (ww3 :: b) ->
                 case GHC.Classes.== @ a w ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.== @ b w1 ww1 ww3 }) -}
c282a018343d81ac00dbabca3541e23e
  $w$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Main.FirstId a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 (Main.$fArbitraryFirstId2
                    @ a
                    w
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                    w1)
                   `cast`
                 (Sym (Main.N:FirstId[0]) <a>_N) }) -}
d4a49faa6eb8026b67f39bc4042591f3
  $w$carbitrary1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Main.Identity a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 ((Test.QuickCheck.Arbitrary.arbitrary @ a w)
                    `cast`
                  (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                    w1)
                   `cast`
                 (Sym (Main.N:Identity[0] <a>_R)) }) -}
953276325b54b4eece34870865cf2f51
  $w$carbitrary2 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Main.LastId a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 (Main.$fArbitraryFirstId2
                    @ a
                    w
                    ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                    w1)
                   `cast`
                 (Sym (Main.N:LastId[0]) <a>_N) }) -}
7c0a5afc0a4f091c6dd22dbdc0efdd07
  $w$carbitrary3 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# a, b #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w2,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w2 #) } } }) -}
f1586423fbfcb907945af69925fd42c0
  $w$csconcat ::
    (GHC.Base.Semigroup a, GHC.Base.Semigroup b) =>
    a -> b -> [Main.Two a b] -> (# a, b #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Base.Semigroup a)
                   (w1 :: GHC.Base.Semigroup b)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: [Main.Two a b]) ->
                 letrec {
                   $wgo :: a -> b -> [Main.Two a b] -> (# a, b #)
                     {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
                   = \ (ww3 :: a) (ww4 :: b) (w2 :: [Main.Two a b]) ->
                     case w2 of wild1 {
                       [] -> (# ww3, ww4 #)
                       : c cs
                       -> case c of ww5 { Main.Two ww6 ww7 ->
                          case $wgo ww6 ww7 cs of ww8 { (#,#) ww9 ww10 ->
                          (# GHC.Base.<> @ a w ww3 ww9, GHC.Base.<> @ b w1 ww4 ww10 #) } } }
                 } in
                 $wgo ww ww1 ww2) -}
c282a018343d81ac00dbabca3541e23e
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> Main.FirstId a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Main.FirstId a) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Main.$w$cshowsPrec1 @ a w 0# w1 `cast` (Main.N:FirstId[0] <a>_N)
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Main.$fShowFirstId7
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowFirstId6
                           (f (GHC.CString.unpackAppendCString# Main.$fShowFirstId3 x)))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowFirstId7
                           (GHC.CString.unpackAppendCString#
                              Main.$fShowFirstId6
                              (f (GHC.CString.unpackAppendCString#
                                    Main.$fShowFirstId3
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
d4a49faa6eb8026b67f39bc4042591f3
  $w$cshowsPrec1 ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> Main.Identity a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Main.Identity a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       Main.$fShowFirstId9
                       w1 `cast` (Main.N:Identity[0] <a>_R)
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Main.$fShowFirstId4 (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowFirstId4
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
953276325b54b4eece34870865cf2f51
  $w$cshowsPrec2 ::
    GHC.Show.Show a => GHC.Prim.Int# -> Main.LastId a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Main.LastId a) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Main.$w$cshowsPrec1 @ a w 0# w1 `cast` (Main.N:LastId[0] <a>_N)
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Main.$fShowLastId2
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowLastId1
                           (f (GHC.CString.unpackAppendCString# Main.$fShowFirstId3 x)))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowLastId2
                           (GHC.CString.unpackAppendCString#
                              Main.$fShowLastId1
                              (f (GHC.CString.unpackAppendCString#
                                    Main.$fShowFirstId3
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
e7b55f3c63a5e07aff126e664e69aef1
  $w$cshowsPrec3 ::
    (GHC.Show.Show a, GHC.Show.Show b) =>
    GHC.Prim.Int# -> a -> b -> GHC.Show.ShowS
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w Main.$fShowFirstId9 ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ b w1 Main.$fShowFirstId9 ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Main.$fShowTwo2
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowTwo2
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
057e724f456951274467d21a94c1594e
  $w$dTestable ::
    (Main.FirstId GHC.Integer.Type.Integer
     -> Main.FirstId GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.FirstId GHC.Integer.Type.Integer
                         -> Main.FirstId GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.FirstId GHC.Integer.Type.Integer)
                   @ (Main.FirstId GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   Main.$fShowFirstId_$s$fShowFirstId
                   Main.$s$fTestable(->)5
                     `cast`
                   ((<Main.FirstId GHC.Integer.Type.Integer -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.FirstId
                                                                                                                                       GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$fArbitraryFirstId_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.FirstId GHC.Integer.Type.Integer>_R))
                   Main.$s$fTestable(->)4
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
e0a710d59320e15d308e208647b9d4c5
  $w$dTestable1 ::
    (Main.FirstId GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.FirstId GHC.Integer.Type.Integer
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.FirstId GHC.Integer.Type.Integer)
                   @ GHC.Types.Bool
                   Main.$fShowFirstId_$s$fShowFirstId
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryFirstId_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.FirstId GHC.Integer.Type.Integer>_R))
                   Main.$s$fTestable(->)4
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
799bd0e037e47737dde3d49efa419b46
  $w$dTestable2 ::
    (Main.LastId GHC.Integer.Type.Integer
     -> Main.LastId GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.LastId GHC.Integer.Type.Integer
                         -> Main.LastId GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.LastId GHC.Integer.Type.Integer)
                   @ (Main.LastId GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   Main.$fShowLastId_$s$fShowLastId
                   Main.$s$fTestable(->)11
                     `cast`
                   ((<Main.LastId GHC.Integer.Type.Integer -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.LastId
                                                                                                                                       GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$fArbitraryLastId_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.LastId GHC.Integer.Type.Integer>_R))
                   Main.$s$fTestable(->)10
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
8d480c08ea1a5a4d960090329467d08f
  $w$dTestable3 ::
    (Main.LastId GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.LastId GHC.Integer.Type.Integer
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.LastId GHC.Integer.Type.Integer)
                   @ GHC.Types.Bool
                   Main.$fShowLastId_$s$fShowLastId
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryLastId_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.LastId GHC.Integer.Type.Integer>_R))
                   Main.$s$fTestable(->)10
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
62790ab496a3632509a9773b2af49b3d
  $w$dTestable4 ::
    (Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Two Main.Trivial GHC.Base.String
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.Two Main.Trivial GHC.Base.String)
                   @ GHC.Types.Bool
                   Main.$fShowTwo_$s$fShowTwo
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryTwo_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Two Main.Trivial [GHC.Types.Char]>_R))
                   Main.$s$fTestable(->)17
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
b3f9ee10f57e38db3196b280f575b45f
  $w$dTestable5 ::
    (Main.Two Main.Trivial GHC.Base.String
     -> Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Two Main.Trivial GHC.Base.String
                         -> Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.Two Main.Trivial GHC.Base.String)
                   @ (Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
                   Main.$fShowTwo_$s$fShowTwo
                   Main.$s$fTestable(->)16
                     `cast`
                   ((<Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Two
                                                                                                                                       Main.Trivial
                                                                                                                                       GHC.Base.String
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$fArbitraryTwo_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Two Main.Trivial [GHC.Types.Char]>_R))
                   Main.$s$fTestable(->)17
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
602aa2c43ce064910f0c1c4e6b3de8d7
  $w$dTestable6 ::
    (Main.Trivial -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Trivial -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Main.Trivial
                   @ GHC.Types.Bool
                   Main.$fShowTrivial
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Main.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Trivial>_R))
                   Main.$fArbitraryTrivial_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
9da9f5d68696354740510b94b2890a41
  $w$dTestable7 ::
    (Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Main.Trivial
                   @ (Main.Trivial -> GHC.Types.Bool)
                   Main.$fShowTrivial
                   Main.$s$fTestable(->)21
                     `cast`
                   ((<Main.Trivial -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Trivial
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Trivial>_R))
                   Main.$fArbitraryTrivial_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
099dc4ecc4057f6cfc6c8409d635ac6d
  $w$s$carbitrary ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Main.FirstId GHC.Integer.Type.Integer
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww8 of ww5 { System.Random.TF.Gen.TFGen ww6 ww10 ww11 ww12 ww13 ww14 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww6
                        ww10
                        ww11
                        ww12 of ww15 { (#,#) ww16 ww17 ->
                 case ww16 of ww18 { System.Random.TF.Gen.TFGen ww19 ww20 ww21 ww22 ww23 ww24 ->
                 (Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral1
                    ww19
                    ww20
                    ww21
                    ww22
                    ww4)
                   `cast`
                 (Sym (Main.N:Identity[0]
                           <GHC.Integer.Type.Integer>_R) ; Sym (Main.N:FirstId[0]) <GHC.Integer.Type.Integer>_N) } } } }) -}
6424a032e1507dd985a888060a8ccf2f
  $w$s$carbitrary2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Main.LastId GHC.Integer.Type.Integer
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww8 of ww5 { System.Random.TF.Gen.TFGen ww6 ww10 ww11 ww12 ww13 ww14 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww6
                        ww10
                        ww11
                        ww12 of ww15 { (#,#) ww16 ww17 ->
                 case ww16 of ww18 { System.Random.TF.Gen.TFGen ww19 ww20 ww21 ww22 ww23 ww24 ->
                 (Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral1
                    ww19
                    ww20
                    ww21
                    ww22
                    ww4)
                   `cast`
                 (Sym (Main.N:Identity[0]
                           <GHC.Integer.Type.Integer>_R) ; Sym (Main.N:LastId[0]) <GHC.Integer.Type.Integer>_N) } } } }) -}
785800be0e9dbc487c3d4e969fa6d566
  $w$s$carbitrary3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# Main.Trivial, [GHC.Types.Char] #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# Main.Trivial,
                    case ww15 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                    case w of ww24 { GHC.Types.I# ww25 ->
                    Test.QuickCheck.Gen.$wlistOf
                      @ GHC.Types.Char
                      Test.QuickCheck.Arbitrary.$fArbitraryChar_$carbitrary
                      ww18
                      ww19
                      ww20
                      ww21
                      ww25 } } #) } } }) -}
fe70c5ee368e3e503dd9b0aef3f211c5
  $w$s$cshow :: Main.Trivial -> [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*H><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Main.Trivial) (ww1 :: [GHC.Types.Char]) ->
                 GHC.CString.unpackAppendCString#
                   Main.$fShowTwo2
                   (case ww of wild { Main.Trivial ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      Main.$fShowTrivial2
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.$fShow(,)3
                            (GHC.Show.showLitString ww1 Main.$fShowTwo4))) })) -}
c282a018343d81ac00dbabca3541e23e
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> Main.FirstId GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Main.FirstId GHC.Integer.Type.Integer)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowFirstId7
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowFirstId6
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Main.$fShowFirstId4
                              (case GHC.Show.$w$cshowsPrec4
                                      11#
                                      w `cast`
                                      (Main.N:FirstId[0] <GHC.Integer.Type.Integer>_N ; Main.N:Identity[0]
                                                                                            <GHC.Integer.Type.Integer>_R)
                                      (GHC.CString.unpackAppendCString#
                                         Main.$fShowFirstId3
                                         w1) of ww2 { (#,#) ww3 ww4 ->
                               GHC.Types.: @ GHC.Types.Char ww3 ww4 })))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowFirstId7
                           (GHC.CString.unpackAppendCString#
                              Main.$fShowFirstId6
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 Main.$fShowFirstId4
                                 (case GHC.Show.$w$cshowsPrec4
                                         11#
                                         w `cast`
                                         (Main.N:FirstId[0] <GHC.Integer.Type.Integer>_N ; Main.N:Identity[0]
                                                                                               <GHC.Integer.Type.Integer>_R)
                                         (GHC.CString.unpackAppendCString#
                                            Main.$fShowFirstId3
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.$fShow(,)2
                                               w1)) of ww2 { (#,#) ww3 ww4 ->
                                  GHC.Types.: @ GHC.Types.Char ww3 ww4 })))) }) -}
953276325b54b4eece34870865cf2f51
  $w$s$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Main.LastId GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Main.LastId GHC.Integer.Type.Integer)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowLastId2
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowLastId1
                           (GHC.Base.++
                              @ GHC.Types.Char
                              Main.$fShowFirstId4
                              (case GHC.Show.$w$cshowsPrec4
                                      11#
                                      w `cast`
                                      (Main.N:LastId[0] <GHC.Integer.Type.Integer>_N ; Main.N:Identity[0]
                                                                                           <GHC.Integer.Type.Integer>_R)
                                      (GHC.CString.unpackAppendCString#
                                         Main.$fShowFirstId3
                                         w1) of ww2 { (#,#) ww3 ww4 ->
                               GHC.Types.: @ GHC.Types.Char ww3 ww4 })))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowLastId2
                           (GHC.CString.unpackAppendCString#
                              Main.$fShowLastId1
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 Main.$fShowFirstId4
                                 (case GHC.Show.$w$cshowsPrec4
                                         11#
                                         w `cast`
                                         (Main.N:LastId[0] <GHC.Integer.Type.Integer>_N ; Main.N:Identity[0]
                                                                                              <GHC.Integer.Type.Integer>_R)
                                         (GHC.CString.unpackAppendCString#
                                            Main.$fShowFirstId3
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.$fShow(,)2
                                               w1)) of ww2 { (#,#) ww3 ww4 ->
                                  GHC.Types.: @ GHC.Types.Char ww3 ww4 })))) }) -}
8a32d43967d369016e4d22c9341f3538
  $w$s$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Main.Trivial
    -> [GHC.Types.Char]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*H><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.Trivial)
                   (ww2 :: [GHC.Types.Char])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Main.$fShowTwo2
                       (case ww1 of wild { Main.Trivial ->
                        GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowTrivial2
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   ww2
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 x)))) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
c282a018343d81ac00dbabca3541e23e
  newtype FirstId a = FirstId {getFirst :: Main.Identity a}
c2bc9f0007a23abbc9adc628f9ff976d
  type FirstIdAssoc a =
    Main.FirstId a
    -> Main.FirstId a -> Main.FirstId a -> GHC.Types.Bool
d4a49faa6eb8026b67f39bc4042591f3
  newtype Identity a = Identity a
953276325b54b4eece34870865cf2f51
  newtype LastId a = LastId {getLast :: Main.Identity a}
08fba57086030e01155955c56acea377
  type LastIdAssoc a =
    Main.LastId a -> Main.LastId a -> Main.LastId a -> GHC.Types.Bool
fc74068ca03dcd0c116cc4d45d7a2cf9
  type TrivAssoc =
    Main.Trivial -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool
765ecc558e2054bfa87e2240bd2c06b6
  data Trivial = Trivial
f1586423fbfcb907945af69925fd42c0
  data Two a b = Two a b
6ac340f747f486cca414351511a8c72d
  type TwoAssoc a b =
    Main.Two a b -> Main.Two a b -> Main.Two a b -> GHC.Types.Bool
c282a018343d81ac00dbabca3541e23e
  getFirst :: Main.FirstId a -> Main.Identity a
  RecSel Left Main.FirstId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Main.getFirst1
                  `cast`
                (forall (a :: <*>_N).
                 <Main.FirstId a>_R ->_R Main.N:FirstId[0] <a>_N) -}
c282a018343d81ac00dbabca3541e23e
  getFirst1 :: Main.FirstId a -> Main.FirstId a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Main.FirstId a) -> ds) -}
953276325b54b4eece34870865cf2f51
  getLast :: Main.LastId a -> Main.Identity a
  RecSel Left Main.LastId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Main.getLast1
                  `cast`
                (forall (a :: <*>_N).
                 <Main.LastId a>_R ->_R Main.N:LastId[0] <a>_N) -}
953276325b54b4eece34870865cf2f51
  getLast1 :: Main.LastId a -> Main.LastId a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Main.LastId a) -> ds) -}
f185e4d2aa4046dcd24f0d56abf2d6f7
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
e8ea8b9b92257b73084c8427b08fe12b
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ Main.TrivAssoc
                        Main.main9
                          `cast`
                        ((<Main.Trivial
                           -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                         <Main.Trivial
                                                                                                                                          -> Main.Trivial
                                                                                                                                          -> Main.Trivial
                                                                                                                                          -> GHC.Types.Bool>_N))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main8
                        s of ds3 { (#,#) ipv ipv1 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (Main.FirstIdAssoc GHC.Integer.Type.Integer)
                        Main.main7
                          `cast`
                        ((<Main.FirstId GHC.Integer.Type.Integer
                           -> Main.FirstId GHC.Integer.Type.Integer
                           -> Main.FirstId GHC.Integer.Type.Integer
                           -> GHC.Types.Bool>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                         <Main.FirstId
                                                                                                                                            GHC.Integer.Type.Integer
                                                                                                                                          -> Main.FirstId
                                                                                                                                               GHC.Integer.Type.Integer
                                                                                                                                          -> Main.FirstId
                                                                                                                                               GHC.Integer.Type.Integer
                                                                                                                                          -> GHC.Types.Bool>_N))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main6
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (Main.LastIdAssoc GHC.Integer.Type.Integer)
                        Main.main5
                          `cast`
                        ((<Main.LastId GHC.Integer.Type.Integer
                           -> Main.LastId GHC.Integer.Type.Integer
                           -> Main.LastId GHC.Integer.Type.Integer
                           -> GHC.Types.Bool>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                         <Main.LastId
                                                                                                                                            GHC.Integer.Type.Integer
                                                                                                                                          -> Main.LastId
                                                                                                                                               GHC.Integer.Type.Integer
                                                                                                                                          -> Main.LastId
                                                                                                                                               GHC.Integer.Type.Integer
                                                                                                                                          -> GHC.Types.Bool>_N))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main4
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (Main.TwoAssoc Main.Trivial GHC.Base.String)
                        Main.main3
                          `cast`
                        ((<Main.Two Main.Trivial GHC.Base.String
                           -> Main.Two Main.Trivial GHC.Base.String
                           -> Main.Two Main.Trivial GHC.Base.String
                           -> GHC.Types.Bool>_R
                          ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                        (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                         <Main.Two
                                                                                                                                            Main.Trivial
                                                                                                                                            GHC.Base.String
                                                                                                                                          -> Main.Two
                                                                                                                                               Main.Trivial
                                                                                                                                               GHC.Base.String
                                                                                                                                          -> Main.Two
                                                                                                                                               Main.Trivial
                                                                                                                                               GHC.Base.String
                                                                                                                                          -> GHC.Types.Bool>_N))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main2
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (# ipv6, GHC.Tuple.() #) } } } }) -}
823276b9dc434505e10f6f57255a93a3
  main10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
8c0037a3cb219e3bdb8de1252e6b3b10
  main2 ::
    Main.Two Main.Trivial GHC.Base.String
    -> Main.Two Main.Trivial GHC.Base.String
    -> Main.Two Main.Trivial GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,U)><S,1*U(A,U)><S,1*U(A,U)>,
     Unfolding: (\ (a :: Main.Two Main.Trivial GHC.Base.String)
                   (b :: Main.Two Main.Trivial GHC.Base.String)
                   (c :: Main.Two Main.Trivial GHC.Base.String) ->
                 case a of wild { Main.Two x1 y1 ->
                 case b of wild1 { Main.Two x2 y2 ->
                 case c of wild2 { Main.Two x3 y3 ->
                 GHC.Base.eqString
                   (GHC.Base.++
                      @ GHC.Types.Char
                      y1
                      (GHC.Base.++ @ GHC.Types.Char y2 y3))
                   (GHC.Base.++
                      @ GHC.Types.Char
                      y1
                      (GHC.Base.++ @ GHC.Types.Char y2 y3)) } } }) -}
fffd73f8117a331bd1c3ec7d35e60041
  main3 ::
    (Main.Two Main.Trivial GHC.Base.String
     -> Main.Two Main.Trivial GHC.Base.String
     -> Main.Two Main.Trivial GHC.Base.String
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Two Main.Trivial GHC.Base.String
                         -> Main.Two Main.Trivial GHC.Base.String
                         -> Main.Two Main.Trivial GHC.Base.String
                         -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.Two Main.Trivial GHC.Base.String)
                   @ (Main.Two Main.Trivial GHC.Base.String
                      -> Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool)
                   Main.$fShowTwo_$s$fShowTwo
                   Main.$s$fTestable(->)19
                     `cast`
                   ((<Main.Two Main.Trivial GHC.Base.String
                      -> Main.Two Main.Trivial GHC.Base.String -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Two
                                                                                                                                       Main.Trivial
                                                                                                                                       GHC.Base.String
                                                                                                                                     -> Main.Two
                                                                                                                                          Main.Trivial
                                                                                                                                          GHC.Base.String
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$fArbitraryTwo_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.Two Main.Trivial [GHC.Types.Char]>_R))
                   Main.$s$fTestable(->)17
                   f
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
4d3923331ee5e0821243a61851358b04
  main4 ::
    Main.LastId GHC.Integer.Type.Integer
    -> Main.LastId GHC.Integer.Type.Integer
    -> Main.LastId GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,U>,
     Unfolding: (\ (a :: Main.LastId GHC.Integer.Type.Integer)
                   (b :: Main.LastId GHC.Integer.Type.Integer)
                   (c :: Main.LastId GHC.Integer.Type.Integer) ->
                 GHC.Integer.Type.eqInteger
                   c `cast`
                   (Main.N:LastId[0] <GHC.Integer.Type.Integer>_N ; Main.N:Identity[0]
                                                                        <GHC.Integer.Type.Integer>_R)
                   c `cast`
                   (Main.N:LastId[0] <GHC.Integer.Type.Integer>_N ; Main.N:Identity[0]
                                                                        <GHC.Integer.Type.Integer>_R)) -}
33373d3b7d931a80d7abfafed2d7bb5d
  main5 ::
    (Main.LastId GHC.Integer.Type.Integer
     -> Main.LastId GHC.Integer.Type.Integer
     -> Main.LastId GHC.Integer.Type.Integer
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.LastId GHC.Integer.Type.Integer
                         -> Main.LastId GHC.Integer.Type.Integer
                         -> Main.LastId GHC.Integer.Type.Integer
                         -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.LastId GHC.Integer.Type.Integer)
                   @ (Main.LastId GHC.Integer.Type.Integer
                      -> Main.LastId GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   Main.$fShowLastId_$s$fShowLastId
                   Main.$s$fTestable(->)9
                     `cast`
                   ((<Main.LastId GHC.Integer.Type.Integer
                      -> Main.LastId GHC.Integer.Type.Integer -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.LastId
                                                                                                                                       GHC.Integer.Type.Integer
                                                                                                                                     -> Main.LastId
                                                                                                                                          GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$fArbitraryLastId_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.LastId GHC.Integer.Type.Integer>_R))
                   Main.$s$fTestable(->)10
                   f
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
20b1b14f41bf63b061d89f174b00c29c
  main6 ::
    Main.FirstId GHC.Integer.Type.Integer
    -> Main.FirstId GHC.Integer.Type.Integer
    -> Main.FirstId GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,A><L,A>,
     Unfolding: (\ (a :: Main.FirstId GHC.Integer.Type.Integer)
                   (b :: Main.FirstId GHC.Integer.Type.Integer)
                   (c :: Main.FirstId GHC.Integer.Type.Integer) ->
                 GHC.Integer.Type.eqInteger
                   a `cast`
                   (Main.N:FirstId[0] <GHC.Integer.Type.Integer>_N ; Main.N:Identity[0]
                                                                         <GHC.Integer.Type.Integer>_R)
                   a `cast`
                   (Main.N:FirstId[0] <GHC.Integer.Type.Integer>_N ; Main.N:Identity[0]
                                                                         <GHC.Integer.Type.Integer>_R)) -}
7c2ea24fabee475faa48fe718fab2185
  main7 ::
    (Main.FirstId GHC.Integer.Type.Integer
     -> Main.FirstId GHC.Integer.Type.Integer
     -> Main.FirstId GHC.Integer.Type.Integer
     -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.FirstId GHC.Integer.Type.Integer
                         -> Main.FirstId GHC.Integer.Type.Integer
                         -> Main.FirstId GHC.Integer.Type.Integer
                         -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (Main.FirstId GHC.Integer.Type.Integer)
                   @ (Main.FirstId GHC.Integer.Type.Integer
                      -> Main.FirstId GHC.Integer.Type.Integer -> GHC.Types.Bool)
                   Main.$fShowFirstId_$s$fShowFirstId
                   Main.$s$fTestable(->)3
                     `cast`
                   ((<Main.FirstId GHC.Integer.Type.Integer
                      -> Main.FirstId GHC.Integer.Type.Integer -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.FirstId
                                                                                                                                       GHC.Integer.Type.Integer
                                                                                                                                     -> Main.FirstId
                                                                                                                                          GHC.Integer.Type.Integer
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$fArbitraryFirstId_$s$carbitrary
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Main.FirstId GHC.Integer.Type.Integer>_R))
                   Main.$s$fTestable(->)4
                   f
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
d403ca938066016998d45949c9900c50
  main8 ::
    Main.Trivial -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: (\ (a :: Main.Trivial)
                   (b :: Main.Trivial)
                   (c :: Main.Trivial) ->
                 GHC.Types.True) -}
387340e9971122c286251a153013f329
  main9 ::
    (Main.Trivial -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (f :: Main.Trivial
                         -> Main.Trivial -> Main.Trivial -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ Main.Trivial
                   @ (Main.Trivial -> Main.Trivial -> GHC.Types.Bool)
                   Main.$fShowTrivial
                   Main.$s$fTestable(->)23
                     `cast`
                   ((<Main.Trivial -> Main.Trivial -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Main.Trivial
                                                                                                                                     -> Main.Trivial
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Main.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Main.Trivial>_R))
                   Main.$fArbitraryTrivial_$cshrink
                   f
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.FirstId]
  = Main.$fArbitraryFirstId
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Identity]
  = Main.$fArbitraryIdentity
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.LastId]
  = Main.$fArbitraryLastId
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Trivial]
  = Main.$fArbitraryTrivial
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Main.Two]
  = Main.$fArbitraryTwo
instance [safe] GHC.Classes.Eq [Main.FirstId] = Main.$fEqFirstId
instance [safe] GHC.Classes.Eq [Main.Identity] = Main.$fEqIdentity
instance [safe] GHC.Classes.Eq [Main.LastId] = Main.$fEqLastId
instance [safe] GHC.Classes.Eq [Main.Trivial] = Main.$fEqTrivial
instance [safe] GHC.Classes.Eq [Main.Two] = Main.$fEqTwo
instance [safe] GHC.Base.Semigroup [Main.FirstId]
  = Main.$fSemigroupFirstId
instance [safe] GHC.Base.Semigroup [Main.LastId]
  = Main.$fSemigroupLastId
instance [safe] GHC.Base.Semigroup [Main.Trivial]
  = Main.$fSemigroupTrivial
instance [safe] GHC.Base.Semigroup [Main.Two] = Main.$fSemigroupTwo
instance [safe] GHC.Show.Show [Main.FirstId] = Main.$fShowFirstId
instance [safe] GHC.Show.Show [Main.Identity] = Main.$fShowIdentity
instance [safe] GHC.Show.Show [Main.LastId] = Main.$fShowLastId
instance [safe] GHC.Show.Show [Main.Trivial] = Main.$fShowTrivial
instance [safe] GHC.Show.Show [Main.Two] = Main.$fShowTwo
"SPEC $carbitrary @ Integer" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                      GHC.Integer.Type.Integer)
  Main.$fArbitraryFirstId1 @ GHC.Integer.Type.Integer $dArbitrary
  = Main.$fArbitraryFirstId_$s$carbitrary
"SPEC $carbitrary @ Integer" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                      GHC.Integer.Type.Integer)
  Main.$fArbitraryLastId1 @ GHC.Integer.Type.Integer $dArbitrary
  = Main.$fArbitraryLastId_$s$carbitrary
"SPEC $carbitrary @ Trivial @ [Char]" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                               [GHC.Types.Char])
                                             ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                Main.Trivial)
  Main.$fArbitraryTwo1 @ Main.Trivial
                       @ [GHC.Types.Char]
                       $dArbitrary1
                       $dArbitrary
  = Main.$fArbitraryTwo_$s$carbitrary
"SPEC $cshow @ Integer" forall ($dShow :: GHC.Show.Show
                                            GHC.Integer.Type.Integer)
  Main.$fShowFirstId_$cshow @ GHC.Integer.Type.Integer $dShow
  = Main.$fShowFirstId_$s$cshow
"SPEC $cshow @ Integer" forall ($dShow :: GHC.Show.Show
                                            GHC.Integer.Type.Integer)
  Main.$fShowLastId_$cshow @ GHC.Integer.Type.Integer $dShow
  = Main.$fShowLastId_$s$cshow
"SPEC $cshow @ Trivial @ [Char]" forall ($dShow :: GHC.Show.Show
                                                     [GHC.Types.Char])
                                        ($dShow1 :: GHC.Show.Show Main.Trivial)
  Main.$fShowTwo_$cshow @ Main.Trivial
                        @ [GHC.Types.Char]
                        $dShow1
                        $dShow
  = Main.$fShowTwo_$s$cshow
"SPEC $cshowList @ Integer" forall ($dShow :: GHC.Show.Show
                                                GHC.Integer.Type.Integer)
  Main.$fShowFirstId_$cshowList @ GHC.Integer.Type.Integer $dShow
  = Main.$fShowFirstId_$s$cshowList
"SPEC $cshowList @ Integer" forall ($dShow :: GHC.Show.Show
                                                GHC.Integer.Type.Integer)
  Main.$fShowLastId_$cshowList @ GHC.Integer.Type.Integer $dShow
  = Main.$fShowLastId_$s$cshowList
"SPEC $cshowList @ Trivial @ [Char]" forall ($dShow :: GHC.Show.Show
                                                         [GHC.Types.Char])
                                            ($dShow1 :: GHC.Show.Show Main.Trivial)
  Main.$fShowTwo_$cshowList @ Main.Trivial
                            @ [GHC.Types.Char]
                            $dShow1
                            $dShow
  = Main.$fShowTwo_$s$cshowList
"SPEC $cshowsPrec @ Integer" forall ($dShow :: GHC.Show.Show
                                                 GHC.Integer.Type.Integer)
  Main.$fShowFirstId_$cshowsPrec @ GHC.Integer.Type.Integer $dShow
  = Main.$fShowFirstId_$s$cshowsPrec
"SPEC $cshowsPrec @ Integer" forall ($dShow :: GHC.Show.Show
                                                 GHC.Integer.Type.Integer)
  Main.$fShowLastId_$cshowsPrec @ GHC.Integer.Type.Integer $dShow
  = Main.$fShowLastId_$s$cshowsPrec
"SPEC $cshowsPrec @ Trivial @ [Char]" forall ($dShow :: GHC.Show.Show
                                                          [GHC.Types.Char])
                                             ($dShow1 :: GHC.Show.Show Main.Trivial)
  Main.$fShowTwo_$cshowsPrec @ Main.Trivial
                             @ [GHC.Types.Char]
                             $dShow1
                             $dShow
  = Main.$fShowTwo_$s$cshowsPrec
"SPEC $fShowFirstId @ Integer" forall ($dShow :: GHC.Show.Show
                                                   GHC.Integer.Type.Integer)
  Main.$fShowFirstId @ GHC.Integer.Type.Integer $dShow
  = Main.$fShowFirstId_$s$fShowFirstId
"SPEC $fShowLastId @ Integer" forall ($dShow :: GHC.Show.Show
                                                  GHC.Integer.Type.Integer)
  Main.$fShowLastId @ GHC.Integer.Type.Integer $dShow
  = Main.$fShowLastId_$s$fShowLastId
"SPEC $fShowTwo @ Trivial @ [Char]" forall ($dShow :: GHC.Show.Show
                                                        [GHC.Types.Char])
                                           ($dShow1 :: GHC.Show.Show Main.Trivial)
  Main.$fShowTwo @ Main.Trivial @ [GHC.Types.Char] $dShow1 $dShow
  = Main.$fShowTwo_$s$fShowTwo
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

